module Aladdin.Front.Analyzer.Parser where import Aladdin.Front.Analyzer.Grammar import Aladdin.Front.Header 
import qualified Control.Monad.Trans.Class as Y
import qualified Control.Monad.Trans.Except as Y
import qualified Control.Monad.Trans.State.Strict as Y
import qualified Data.Map.Strict as YMap
import qualified Data.Set as YSet

type ParserS = Int

type NSym = Int

type TSym = Int

data Sym
    = NS NSym
    | TS TSym
    deriving (Eq, Ord)

data Action
    = Shift ParserS
    | Reduce (NSym, [Sym])
    | Accept
    deriving (Eq)

data LR1Parser
    = LR1Parser
        { getInitialS :: ParserS
        , getActionTable :: YMap.Map (ParserS, TSym) Action
        , getReduceTable :: YMap.Map (ParserS, NSym) ParserS
        }
    deriving ()

data ParsingTree
    = PTLeaf (AladinToken)
    | PTBranch NSym [ParsingTree]
    deriving ()

mkChrLit :: SLoc -> Char -> TermRep
mkChrLit loc ch = RCon loc ("chr_" ++ show ch)

mkStrLit :: SLoc -> String -> TermRep
mkStrLit loc [] = RCon loc "[]"
mkStrLit loc (ch : str) = RApp loc (RApp loc (RCon loc "::") (mkChrLit loc ch)) (mkStrLit loc str)


runParser :: [AladinToken] -> Either (Maybe (AladinToken)) (Either TermRep [Decl])
runParser = fmap (getEither getQuery (getSequence getDecl)) . runLR1 theLR1Parser where
    getQuery :: ParsingTree -> (TermRep)
    getQuery (PTBranch _ [PTLeaf (ATQuest loc_1), _2@(PTBranch guard2 _), PTLeaf (ATSemicolon loc_3), ])
        | [guard2, ] `elem` [[, 3, ], ] =
            (getTermRep0 _2)
    getDecl :: ParsingTree -> (Decl)
    getDecl (PTBranch _ [PTLeaf (ATKind loc_1), PTLeaf (ATSmallId loc_2 this_2), _3@(PTBranch guard3 _), PTLeaf (ATSemicolon loc_4), ])
        | [guard3, ] `elem` [[, 13, ], ] =
            KindDecl ((loc_1) <> (loc_4)) (this_2) (getKindRep0 _3)
    getDecl (PTBranch _ [PTLeaf (ATType loc_1), PTLeaf (ATSmallId loc_2 this_2), _3@(PTBranch guard3 _), PTLeaf (ATSemicolon loc_4), ])
        | [guard3, ] `elem` [[, 15, ], ] =
            TypeDecl ((loc_1) <> (loc_4)) (this_2) (getTypeRep0 _3)
    getDecl (PTBranch _ [_1@(PTBranch guard1 _), PTLeaf (ATSemicolon loc_2), ])
        | [guard1, ] `elem` [[, 3, ], ] =
            FactDecl (getSLoc (getTermRep0 _1) <> (loc_2)) (getTermRep0 _1)
    getKindRep0 :: ParsingTree -> (KindRep)
    getKindRep0 (PTBranch _ [_1@(PTBranch guard1 _), PTLeaf (ATArrow loc_2), _3@(PTBranch guard3 _), ])
        | [guard1, guard3, ] `elem` [[, 14, , 13, ], ] =
            RKArr (getSLoc (getKindRep1 _1) <> getSLoc (getKindRep0 _3)) (getKindRep1 _1) (getKindRep0 _3)
    getKindRep0 (PTBranch _ [_1@(PTBranch guard1 _), ])
        | [guard1, ] `elem` [[, 14, ], ] =
            (getKindRep1 _1)
    getKindRep1 :: ParsingTree -> (KindRep)
    getKindRep1 (PTBranch _ [PTLeaf (ATStar loc_1), ])
        | otherwise =
            RStar (loc_1)
    getKindRep1 (PTBranch _ [PTLeaf (ATLParen loc_1), _2@(PTBranch guard2 _), PTLeaf (ATRParen loc_3), ])
        | [guard2, ] `elem` [[, 13, ], ] =
            RKInd ((loc_1) <> (loc_3)) (getKindRep0 _2)
    getTypeRep0 :: ParsingTree -> (TypeRep)
    getTypeRep0 (PTBranch _ [_1@(PTBranch guard1 _), PTLeaf (ATArrow loc_2), _3@(PTBranch guard3 _), ])
        | [guard1, guard3, ] `elem` [[, 16, , 15, ], ] =
            RTyArr (getSLoc (getTypeRep1 _1) <> getSLoc (getTypeRep0 _3)) (getTypeRep1 _1) (getTypeRep0 _3)
    getTypeRep0 (PTBranch _ [_1@(PTBranch guard1 _), ])
        | [guard1, ] `elem` [[, 16, ], ] =
            (getTypeRep1 _1)
    getTypeRep1 :: ParsingTree -> (TypeRep)
    getTypeRep1 (PTBranch _ [_1@(PTBranch guard1 _), _2@(PTBranch guard2 _), ])
        | [guard1, guard2, ] `elem` [[, 16, , 17, ], ] =
            RTyApp (getSLoc (getTypeRep1 _1) <> getSLoc (getTypeRep2 _2)) (getTypeRep1 _1) (getTypeRep2 _2)
    getTypeRep1 (PTBranch _ [_1@(PTBranch guard1 _), ])
        | [guard1, ] `elem` [[, 17, ], ] =
            (getTypeRep2 _1)
    getTypeRep2 :: ParsingTree -> (TypeRep)
    getTypeRep2 (PTBranch _ [PTLeaf (ATSmallId loc_1 this_1), ])
        | otherwise =
            RTyCon (loc_1) (this_1)
    getTypeRep2 (PTBranch _ [PTLeaf (ATLargeId loc_1 this_1), ])
        | otherwise =
            RTyVar (loc_1) (this_1)
    getTypeRep2 (PTBranch _ [PTLeaf (ATLParen loc_1), _2@(PTBranch guard2 _), PTLeaf (ATRParen loc_3), ])
        | [guard2, ] `elem` [[, 15, ], ] =
            RTyInd ((loc_1) <> (loc_3)) (getTypeRep0 _2)
    getTermRep0 :: ParsingTree -> (TermRep)
    getTermRep0 (PTBranch _ [PTLeaf (ATLargeId loc_1 this_1), PTLeaf (ATBSlash loc_2), _3@(PTBranch guard3 _), ])
        | [guard3, ] `elem` [[, 3, ], ] =
            RAbs ((loc_1) <> getSLoc (getTermRep0 _3)) (this_1) (getTermRep0 _3)
    getTermRep0 (PTBranch _ [_1@(PTBranch guard1 _), PTLeaf (ATIf loc_2), _3@(PTBranch guard3 _), ])
        | [guard1, guard3, ] `elem` [[, 4, , 7, ], ] =
            RApp (getSLoc (getTermRep5 _1) <> getSLoc (getTermRep1 _3)) (RApp (getSLoc (getTermRep5 _1) <> (loc_2)) (RCon (loc_2) ":-") (getTermRep5 _1)) (getTermRep1 _3)
    getTermRep0 (PTBranch _ [_1@(PTBranch guard1 _), ])
        | [guard1, ] `elem` [[, 7, ], ] =
            (getTermRep1 _1)
    getTermRep1 :: ParsingTree -> (TermRep)
    getTermRep1 (PTBranch _ [_1@(PTBranch guard1 _), PTLeaf (ATOr loc_2), _3@(PTBranch guard3 _), ])
        | [guard1, guard3, ] `elem` [[, 7, , 8, ], ] =
            RApp (getSLoc (getTermRep1 _1) <> getSLoc (getTermRep2 _3)) (RApp (getSLoc (getTermRep1 _1) <> (loc_2)) (RCon (loc_2) ";") (getTermRep1 _1)) (getTermRep2 _3)
    getTermRep1 (PTBranch _ [_1@(PTBranch guard1 _), ])
        | [guard1, ] `elem` [[, 8, ], ] =
            (getTermRep2 _1)
    getTermRep2 :: ParsingTree -> (TermRep)
    getTermRep2 (PTBranch _ [_1@(PTBranch guard1 _), PTLeaf (ATImply loc_2), _3@(PTBranch guard3 _), ])
        | [guard1, guard3, ] `elem` [[, 4, , 8, ], ] =
            RApp (getSLoc (getTermRep5 _1) <> getSLoc (getTermRep2 _3)) (RApp (getSLoc (getTermRep5 _1) <> (loc_2)) (RCon (loc_2) "=>") (getTermRep5 _1)) (getTermRep2 _3)
    getTermRep2 (PTBranch _ [_1@(PTBranch guard1 _), ])
        | [guard1, ] `elem` [[, 9, ], ] =
            (getTermRep3 _1)
    getTermRep3 :: ParsingTree -> (TermRep)
    getTermRep3 (PTBranch _ [_1@(PTBranch guard1 _), PTLeaf (ATAnd loc_2), _3@(PTBranch guard3 _), ])
        | [guard1, guard3, ] `elem` [[, 9, , 10, ], ] =
            RApp (getSLoc (getTermRep3 _1) <> getSLoc (getTermRep4 _3)) (RApp (getSLoc (getTermRep3 _1) <> (loc_2)) (RCon (loc_2) ",") (getTermRep3 _1)) (getTermRep4 _3)
    getTermRep3 (PTBranch _ [_1@(PTBranch guard1 _), ])
        | [guard1, ] `elem` [[, 10, ], ] =
            (getTermRep4 _1)
    getTermRep4 :: ParsingTree -> (TermRep)
    getTermRep4 (PTBranch _ [_1@(PTBranch guard1 _), PTLeaf (ATCons loc_2), _3@(PTBranch guard3 _), ])
        | [guard1, guard3, ] `elem` [[, 4, , 10, ], ] =
            RApp (getSLoc (getTermRep5 _1) <> getSLoc (getTermRep4 _3)) (RApp (getSLoc (getTermRep5 _1) <> (loc_2)) (RCon (loc_2) "::") (getTermRep5 _1)) (getTermRep4 _3)
    getTermRep4 (PTBranch _ [_1@(PTBranch guard1 _), ])
        | [guard1, ] `elem` [[, 4, ], ] =
            (getTermRep5 _1)
    getTermRep5 :: ParsingTree -> (TermRep)
    getTermRep5 (PTBranch _ [_1@(PTBranch guard1 _), _2@(PTBranch guard2 _), ])
        | [guard1, guard2, ] `elem` [[, 4, , 5, ], ] =
            RApp (getSLoc (getTermRep5 _1) <> getSLoc (getTermRep6 _2)) (getTermRep5 _1) (getTermRep6 _2)
    getTermRep5 (PTBranch _ [_1@(PTBranch guard1 _), ])
        | [guard1, ] `elem` [[, 5, ], ] =
            (getTermRep6 _1)
    getTermRep6 :: ParsingTree -> (TermRep)
    getTermRep6 (PTBranch _ [PTLeaf (ATCut loc_1), ])
        | otherwise =
            RCon (loc_1) "!"
    getTermRep6 (PTBranch _ [PTLeaf (ATSmallId loc_1 this_1), ])
        | otherwise =
            RCon (loc_1) (this_1)
    getTermRep6 (PTBranch _ [PTLeaf (ATLargeId loc_1 this_1), ])
        | otherwise =
            RVar (loc_1) (this_1)
    getTermRep6 (PTBranch _ [PTLeaf (ATLiteral loc_1 (StrLit this_1)), ])
        | otherwise =
            mkStrLit (loc_1) (this_1)
    getTermRep6 (PTBranch _ [PTLeaf (ATLiteral loc_1 (ChrLit this_1)), ])
        | otherwise =
            mkChrLit (loc_1) (this_1)
    getTermRep6 (PTBranch _ [PTLeaf (ATLBracket loc_1), PTLeaf (ATRBracket loc_2), ])
        | otherwise =
            RCon ((loc_1) <> (loc_2)) "[]"
    getTermRep6 (PTBranch _ [PTLeaf (ATLBracket loc_1), _2@(PTBranch guard2 _), PTLeaf (ATRBracket loc_3), ])
        | [guard2, ] `elem` [[, 6, ], ] =
            RInd ((loc_1) <> (loc_3)) (getListBody _2)
    getTermRep6 (PTBranch _ [PTLeaf (ATLParen loc_1), _2@(PTBranch guard2 _), PTLeaf (ATRParen loc_3), ])
        | [guard2, ] `elem` [[, 3, ], ] =
            RInd ((loc_1) <> (loc_3)) (getTermRep0 _2)
    getSequence :: (ParsingTree -> (a)) -> ParsingTree -> ([a])
    getSequence getElem (PTBranch _ [])
        | otherwise =
            []
    getSequence getElem (PTBranch _ [_1@(PTBranch guard1 _), _2@(PTBranch guard2 _), ])
        | [guard1, guard2, ] `elem` [[, 12, , 11, ], ] =
            (getElem _1) : (getSequence getElem _2)
    getEither :: (ParsingTree -> (a)) -> (ParsingTree -> (b)) -> ParsingTree -> (Either a b)
    getEither getLeft getRight (PTBranch _ [_1@(PTBranch guard1 _), ])
        | [guard1, ] `elem` [[, 2, ], ] =
            Left (getLeft _1)
    getEither getLeft getRight (PTBranch _ [_1@(PTBranch guard1 _), ])
        | [guard1, ] `elem` [[, 11, ], ] =
            Right (getRight _1)
    getListBody :: ParsingTree -> (TermRep)
    getListBody (PTBranch _ [_1@(PTBranch guard1 _), ])
        | [guard1, ] `elem` [[, 4, ], ] =
            RApp (getSLoc (getTermRep5 _1)) (RApp (getSLoc (getTermRep5 _1)) (RCon (getSLoc (getTermRep5 _1)) "::") (getTermRep5 _1)) (RCon (getSLoc (getTermRep5 _1)) "[]")
    getListBody (PTBranch _ [_1@(PTBranch guard1 _), PTLeaf (ATAnd loc_2), _3@(PTBranch guard3 _), ])
        | [guard1, guard3, ] `elem` [[, 4, , 6, ], ] =
            RApp (getSLoc (getTermRep5 _1) <> getSLoc (getListBody _3)) (RApp (getSLoc (getTermRep5 _1) <> (loc_2)) (RCon (loc_2) "::") (getTermRep5 _1)) (getListBody _3)
    toTerminal :: (AladinToken) -> TSym
    toTerminal (ATQuest loc) = 1
    toTerminal (ATSemicolon loc) = 2
    toTerminal (ATKind loc) = 3
    toTerminal (ATType loc) = 4
    toTerminal (ATArrow loc) = 5
    toTerminal (ATStar loc) = 6
    toTerminal (ATLParen loc) = 7
    toTerminal (ATRParen loc) = 8
    toTerminal (ATIf loc) = 9
    toTerminal (ATBSlash loc) = 10
    toTerminal (ATOr loc) = 11
    toTerminal (ATImply loc) = 12
    toTerminal (ATAnd loc) = 13
    toTerminal (ATCut loc) = 14
    toTerminal (ATLBracket loc) = 15
    toTerminal (ATRBracket loc) = 16
    toTerminal (ATCons loc) = 17
    toTerminal (ATSmallId loc this) = 18
    toTerminal (ATLargeId loc this) = 19
    toTerminal (ATLiteral loc (StrLit this)) = 20
    toTerminal (ATLiteral loc (ChrLit this)) = 21
    runLR1 :: LR1Parser -> [AladinToken] -> Either (Maybe (AladinToken)) ParsingTree
    runLR1 (LR1Parser getInitS getActionT getReduceT) = go where
        loop inputs = do
            let cur = if null inputs then 0 else toTerminal (head inputs)
                exception = Y.lift (if null inputs then Left Nothing else Left (Just (head inputs)))
            (stack, trees) <- Y.get
            case YMap.lookup (head stack, cur) getActionT of
                Nothing -> exception
                Just Accept -> return ()
                Just (Shift top') -> do
                    Y.put (top' : stack, PTLeaf (head inputs) : trees)
                    loop (tail inputs)
                Just (Reduce (lhs, rhs)) -> do
                    let n = length rhs
                    case YMap.lookup (stack !! n, lhs) getReduceT of
                        Nothing -> exception
                        Just top' -> do
                            Y.put (top' : drop n stack, PTBranch lhs (reverse (take n trees)) : drop n trees)
                            loop inputs
        go tokens = do
            (_, (_, result)) <- Y.runStateT (loop tokens) ([getInitS], [])
            case result of
                [output] -> return output
    theLR1Parser :: LR1Parser
    theLR1Parser = LR1Parser
        { getInitialS = 0
        , getActionTable = YMap.fromAscList 
            [ ((0,0),Reduce (11,[]))
            , ((0,21),Shift 12)
            , ((0,14),Shift 13)
            , ((0,3),Shift 14)
            , ((0,19),Shift 15)
            , ((0,15),Shift 16)
            , ((0,7),Shift 17)
            , ((0,1),Shift 18)
            , ((0,18),Shift 19)
            , ((0,20),Shift 20)
            , ((0,4),Shift 21)
            , ((1,0),Reduce (11,[]))
            , ((1,21),Shift 12)
            , ((1,14),Shift 13)
            , ((1,3),Shift 14)
            , ((1,19),Shift 15)
            , ((1,15),Shift 16)
            , ((1,7),Shift 17)
            , ((1,18),Shift 19)
            , ((1,20),Shift 20)
            , ((1,4),Shift 21)
            , ((2,0),Reduce (1,[NS 2,]))
            , ((3,2),Shift 23)
            , ((4,11),Shift 32)
            , ((4,8),Reduce (3,[NS 7,]))
            , ((4,2),Reduce (3,[NS 7,]))
            , ((5,11),Reduce (7,[NS 8,]))
            , ((5,8),Reduce (7,[NS 8,]))
            , ((5,2),Reduce (7,[NS 8,]))
            , ((6,13),Shift 38)
            , ((6,11),Reduce (8,[NS 9,]))
            , ((6,8),Reduce (8,[NS 9,]))
            , ((6,2),Reduce (8,[NS 9,]))
            , ((7,13),Reduce (9,[NS 10,]))
            , ((7,11),Reduce (9,[NS 10,]))
            , ((7,8),Reduce (9,[NS 10,]))
            , ((7,2),Reduce (9,[NS 10,]))
            , ((8,13),Reduce (10,[NS 4,]))
            , ((8,21),Shift 12)
            , ((8,17),Shift 34)
            , ((8,14),Shift 13)
            , ((8,9),Shift 35)
            , ((8,12),Shift 36)
            , ((8,19),Shift 28)
            , ((8,15),Shift 16)
            , ((8,7),Shift 17)
            , ((8,11),Reduce (10,[NS 4,]))
            , ((8,8),Reduce (10,[NS 4,]))
            , ((8,2),Reduce (10,[NS 4,]))
            , ((8,18),Shift 19)
            , ((8,20),Shift 20)
            , ((9,13),Reduce (4,[NS 5,]))
            , ((9,21),Reduce (4,[NS 5,]))
            , ((9,17),Reduce (4,[NS 5,]))
            , ((9,14),Reduce (4,[NS 5,]))
            , ((9,9),Reduce (4,[NS 5,]))
            , ((9,12),Reduce (4,[NS 5,]))
            , ((9,19),Reduce (4,[NS 5,]))
            , ((9,15),Reduce (4,[NS 5,]))
            , ((9,7),Reduce (4,[NS 5,]))
            , ((9,11),Reduce (4,[NS 5,]))
            , ((9,16),Reduce (4,[NS 5,]))
            , ((9,8),Reduce (4,[NS 5,]))
            , ((9,2),Reduce (4,[NS 5,]))
            , ((9,18),Reduce (4,[NS 5,]))
            , ((9,20),Reduce (4,[NS 5,]))
            , ((10,0),Reduce (1,[NS 11,]))
            , ((11,0),Accept)
            , ((12,13),Reduce (5,[TS 21,]))
            , ((12,21),Reduce (5,[TS 21,]))
            , ((12,17),Reduce (5,[TS 21,]))
            , ((12,14),Reduce (5,[TS 21,]))
            , ((12,9),Reduce (5,[TS 21,]))
            , ((12,12),Reduce (5,[TS 21,]))
            , ((12,19),Reduce (5,[TS 21,]))
            , ((12,15),Reduce (5,[TS 21,]))
            , ((12,7),Reduce (5,[TS 21,]))
            , ((12,11),Reduce (5,[TS 21,]))
            , ((12,16),Reduce (5,[TS 21,]))
            , ((12,8),Reduce (5,[TS 21,]))
            , ((12,2),Reduce (5,[TS 21,]))
            , ((12,18),Reduce (5,[TS 21,]))
            , ((12,20),Reduce (5,[TS 21,]))
            , ((13,13),Reduce (5,[TS 14,]))
            , ((13,21),Reduce (5,[TS 14,]))
            , ((13,17),Reduce (5,[TS 14,]))
            , ((13,14),Reduce (5,[TS 14,]))
            , ((13,9),Reduce (5,[TS 14,]))
            , ((13,12),Reduce (5,[TS 14,]))
            , ((13,19),Reduce (5,[TS 14,]))
            , ((13,15),Reduce (5,[TS 14,]))
            , ((13,7),Reduce (5,[TS 14,]))
            , ((13,11),Reduce (5,[TS 14,]))
            , ((13,16),Reduce (5,[TS 14,]))
            , ((13,8),Reduce (5,[TS 14,]))
            , ((13,2),Reduce (5,[TS 14,]))
            , ((13,18),Reduce (5,[TS 14,]))
            , ((13,20),Reduce (5,[TS 14,]))
            , ((14,18),Shift 24)
            , ((15,13),Reduce (5,[TS 19,]))
            , ((15,10),Shift 37)
            , ((15,21),Reduce (5,[TS 19,]))
            , ((15,17),Reduce (5,[TS 19,]))
            , ((15,14),Reduce (5,[TS 19,]))
            , ((15,9),Reduce (5,[TS 19,]))
            , ((15,12),Reduce (5,[TS 19,]))
            , ((15,19),Reduce (5,[TS 19,]))
            , ((15,15),Reduce (5,[TS 19,]))
            , ((15,7),Reduce (5,[TS 19,]))
            , ((15,11),Reduce (5,[TS 19,]))
            , ((15,8),Reduce (5,[TS 19,]))
            , ((15,2),Reduce (5,[TS 19,]))
            , ((15,18),Reduce (5,[TS 19,]))
            , ((15,20),Reduce (5,[TS 19,]))
            , ((16,21),Shift 12)
            , ((16,14),Shift 13)
            , ((16,19),Shift 28)
            , ((16,15),Shift 16)
            , ((16,7),Shift 17)
            , ((16,16),Shift 29)
            , ((16,18),Shift 19)
            , ((16,20),Shift 20)
            , ((17,21),Shift 12)
            , ((17,14),Shift 13)
            , ((17,19),Shift 15)
            , ((17,15),Shift 16)
            , ((17,7),Shift 17)
            , ((17,18),Shift 19)
            , ((17,20),Shift 20)
            , ((18,21),Shift 12)
            , ((18,14),Shift 13)
            , ((18,19),Shift 15)
            , ((18,15),Shift 16)
            , ((18,7),Shift 17)
            , ((18,18),Shift 19)
            , ((18,20),Shift 20)
            , ((19,13),Reduce (5,[TS 18,]))
            , ((19,21),Reduce (5,[TS 18,]))
            , ((19,17),Reduce (5,[TS 18,]))
            , ((19,14),Reduce (5,[TS 18,]))
            , ((19,9),Reduce (5,[TS 18,]))
            , ((19,12),Reduce (5,[TS 18,]))
            , ((19,19),Reduce (5,[TS 18,]))
            , ((19,15),Reduce (5,[TS 18,]))
            , ((19,7),Reduce (5,[TS 18,]))
            , ((19,11),Reduce (5,[TS 18,]))
            , ((19,16),Reduce (5,[TS 18,]))
            , ((19,8),Reduce (5,[TS 18,]))
            , ((19,2),Reduce (5,[TS 18,]))
            , ((19,18),Reduce (5,[TS 18,]))
            , ((19,20),Reduce (5,[TS 18,]))
            , ((20,13),Reduce (5,[TS 20,]))
            , ((20,21),Reduce (5,[TS 20,]))
            , ((20,17),Reduce (5,[TS 20,]))
            , ((20,14),Reduce (5,[TS 20,]))
            , ((20,9),Reduce (5,[TS 20,]))
            , ((20,12),Reduce (5,[TS 20,]))
            , ((20,19),Reduce (5,[TS 20,]))
            , ((20,15),Reduce (5,[TS 20,]))
            , ((20,7),Reduce (5,[TS 20,]))
            , ((20,11),Reduce (5,[TS 20,]))
            , ((20,16),Reduce (5,[TS 20,]))
            , ((20,8),Reduce (5,[TS 20,]))
            , ((20,2),Reduce (5,[TS 20,]))
            , ((20,18),Reduce (5,[TS 20,]))
            , ((20,20),Reduce (5,[TS 20,]))
            , ((21,18),Shift 25)
            , ((22,0),Reduce (11,[NS 12,NS 11,]))
            , ((23,0),Reduce (12,[NS 3,TS 2,]))
            , ((23,21),Reduce (12,[NS 3,TS 2,]))
            , ((23,14),Reduce (12,[NS 3,TS 2,]))
            , ((23,3),Reduce (12,[NS 3,TS 2,]))
            , ((23,19),Reduce (12,[NS 3,TS 2,]))
            , ((23,15),Reduce (12,[NS 3,TS 2,]))
            , ((23,7),Reduce (12,[NS 3,TS 2,]))
            , ((23,18),Reduce (12,[NS 3,TS 2,]))
            , ((23,20),Reduce (12,[NS 3,TS 2,]))
            , ((23,4),Reduce (12,[NS 3,TS 2,]))
            , ((24,7),Shift 41)
            , ((24,6),Shift 42)
            , ((25,19),Shift 46)
            , ((25,7),Shift 47)
            , ((25,18),Shift 48)
            , ((26,16),Shift 59)
            , ((27,13),Shift 49)
            , ((27,21),Shift 12)
            , ((27,14),Shift 13)
            , ((27,19),Shift 28)
            , ((27,15),Shift 16)
            , ((27,7),Shift 17)
            , ((27,16),Reduce (6,[NS 4,]))
            , ((27,18),Shift 19)
            , ((27,20),Shift 20)
            , ((28,13),Reduce (5,[TS 19,]))
            , ((28,21),Reduce (5,[TS 19,]))
            , ((28,17),Reduce (5,[TS 19,]))
            , ((28,14),Reduce (5,[TS 19,]))
            , ((28,9),Reduce (5,[TS 19,]))
            , ((28,12),Reduce (5,[TS 19,]))
            , ((28,19),Reduce (5,[TS 19,]))
            , ((28,15),Reduce (5,[TS 19,]))
            , ((28,7),Reduce (5,[TS 19,]))
            , ((28,11),Reduce (5,[TS 19,]))
            , ((28,16),Reduce (5,[TS 19,]))
            , ((28,8),Reduce (5,[TS 19,]))
            , ((28,2),Reduce (5,[TS 19,]))
            , ((28,18),Reduce (5,[TS 19,]))
            , ((28,20),Reduce (5,[TS 19,]))
            , ((29,13),Reduce (5,[TS 15,TS 16,]))
            , ((29,21),Reduce (5,[TS 15,TS 16,]))
            , ((29,17),Reduce (5,[TS 15,TS 16,]))
            , ((29,14),Reduce (5,[TS 15,TS 16,]))
            , ((29,9),Reduce (5,[TS 15,TS 16,]))
            , ((29,12),Reduce (5,[TS 15,TS 16,]))
            , ((29,19),Reduce (5,[TS 15,TS 16,]))
            , ((29,15),Reduce (5,[TS 15,TS 16,]))
            , ((29,7),Reduce (5,[TS 15,TS 16,]))
            , ((29,11),Reduce (5,[TS 15,TS 16,]))
            , ((29,16),Reduce (5,[TS 15,TS 16,]))
            , ((29,8),Reduce (5,[TS 15,TS 16,]))
            , ((29,2),Reduce (5,[TS 15,TS 16,]))
            , ((29,18),Reduce (5,[TS 15,TS 16,]))
            , ((29,20),Reduce (5,[TS 15,TS 16,]))
            , ((30,2),Shift 50)
            , ((31,8),Shift 60)
            , ((32,21),Shift 12)
            , ((32,14),Shift 13)
            , ((32,19),Shift 28)
            , ((32,15),Shift 16)
            , ((32,7),Shift 17)
            , ((32,18),Shift 19)
            , ((32,20),Shift 20)
            , ((33,13),Reduce (4,[NS 4,NS 5,]))
            , ((33,21),Reduce (4,[NS 4,NS 5,]))
            , ((33,17),Reduce (4,[NS 4,NS 5,]))
            , ((33,14),Reduce (4,[NS 4,NS 5,]))
            , ((33,9),Reduce (4,[NS 4,NS 5,]))
            , ((33,12),Reduce (4,[NS 4,NS 5,]))
            , ((33,19),Reduce (4,[NS 4,NS 5,]))
            , ((33,15),Reduce (4,[NS 4,NS 5,]))
            , ((33,7),Reduce (4,[NS 4,NS 5,]))
            , ((33,11),Reduce (4,[NS 4,NS 5,]))
            , ((33,16),Reduce (4,[NS 4,NS 5,]))
            , ((33,8),Reduce (4,[NS 4,NS 5,]))
            , ((33,2),Reduce (4,[NS 4,NS 5,]))
            , ((33,18),Reduce (4,[NS 4,NS 5,]))
            , ((33,20),Reduce (4,[NS 4,NS 5,]))
            , ((34,21),Shift 12)
            , ((34,14),Shift 13)
            , ((34,19),Shift 28)
            , ((34,15),Shift 16)
            , ((34,7),Shift 17)
            , ((34,18),Shift 19)
            , ((34,20),Shift 20)
            , ((35,21),Shift 12)
            , ((35,14),Shift 13)
            , ((35,19),Shift 28)
            , ((35,15),Shift 16)
            , ((35,7),Shift 17)
            , ((35,18),Shift 19)
            , ((35,20),Shift 20)
            , ((36,21),Shift 12)
            , ((36,14),Shift 13)
            , ((36,19),Shift 28)
            , ((36,15),Shift 16)
            , ((36,7),Shift 17)
            , ((36,18),Shift 19)
            , ((36,20),Shift 20)
            , ((37,21),Shift 12)
            , ((37,14),Shift 13)
            , ((37,19),Shift 15)
            , ((37,15),Shift 16)
            , ((37,7),Shift 17)
            , ((37,18),Shift 19)
            , ((37,20),Shift 20)
            , ((38,21),Shift 12)
            , ((38,14),Shift 13)
            , ((38,19),Shift 28)
            , ((38,15),Shift 16)
            , ((38,7),Shift 17)
            , ((38,18),Shift 19)
            , ((38,20),Shift 20)
            , ((39,2),Shift 61)
            , ((40,5),Shift 64)
            , ((40,8),Reduce (13,[NS 14,]))
            , ((40,2),Reduce (13,[NS 14,]))
            , ((41,7),Shift 41)
            , ((41,6),Shift 42)
            , ((42,5),Reduce (14,[TS 6,]))
            , ((42,8),Reduce (14,[TS 6,]))
            , ((42,2),Reduce (14,[TS 6,]))
            , ((43,2),Shift 62)
            , ((44,5),Shift 68)
            , ((44,19),Shift 46)
            , ((44,7),Shift 47)
            , ((44,8),Reduce (15,[NS 16,]))
            , ((44,2),Reduce (15,[NS 16,]))
            , ((44,18),Shift 48)
            , ((45,5),Reduce (16,[NS 17,]))
            , ((45,19),Reduce (16,[NS 17,]))
            , ((45,7),Reduce (16,[NS 17,]))
            , ((45,8),Reduce (16,[NS 17,]))
            , ((45,2),Reduce (16,[NS 17,]))
            , ((45,18),Reduce (16,[NS 17,]))
            , ((46,5),Reduce (17,[TS 19,]))
            , ((46,19),Reduce (17,[TS 19,]))
            , ((46,7),Reduce (17,[TS 19,]))
            , ((46,8),Reduce (17,[TS 19,]))
            , ((46,2),Reduce (17,[TS 19,]))
            , ((46,18),Reduce (17,[TS 19,]))
            , ((47,19),Shift 46)
            , ((47,7),Shift 47)
            , ((47,18),Shift 48)
            , ((48,5),Reduce (17,[TS 18,]))
            , ((48,19),Reduce (17,[TS 18,]))
            , ((48,7),Reduce (17,[TS 18,]))
            , ((48,8),Reduce (17,[TS 18,]))
            , ((48,2),Reduce (17,[TS 18,]))
            , ((48,18),Reduce (17,[TS 18,]))
            , ((49,21),Shift 12)
            , ((49,14),Shift 13)
            , ((49,19),Shift 28)
            , ((49,15),Shift 16)
            , ((49,7),Shift 17)
            , ((49,18),Shift 19)
            , ((49,20),Shift 20)
            , ((50,0),Reduce (2,[TS 1,NS 3,TS 2,]))
            , ((51,8),Reduce (3,[TS 19,TS 10,NS 3,]))
            , ((51,2),Reduce (3,[TS 19,TS 10,NS 3,]))
            , ((52,11),Shift 32)
            , ((52,8),Reduce (3,[NS 4,TS 9,NS 7,]))
            , ((52,2),Reduce (3,[NS 4,TS 9,NS 7,]))
            , ((53,13),Reduce (10,[NS 4,]))
            , ((53,21),Shift 12)
            , ((53,17),Shift 34)
            , ((53,14),Shift 13)
            , ((53,12),Shift 36)
            , ((53,19),Shift 28)
            , ((53,15),Shift 16)
            , ((53,7),Shift 17)
            , ((53,11),Reduce (10,[NS 4,]))
            , ((53,8),Reduce (10,[NS 4,]))
            , ((53,2),Reduce (10,[NS 4,]))
            , ((53,18),Shift 19)
            , ((53,20),Shift 20)
            , ((54,11),Reduce (7,[NS 7,TS 11,NS 8,]))
            , ((54,8),Reduce (7,[NS 7,TS 11,NS 8,]))
            , ((54,2),Reduce (7,[NS 7,TS 11,NS 8,]))
            , ((55,11),Reduce (8,[NS 4,TS 12,NS 8,]))
            , ((55,8),Reduce (8,[NS 4,TS 12,NS 8,]))
            , ((55,2),Reduce (8,[NS 4,TS 12,NS 8,]))
            , ((56,13),Reduce (9,[NS 9,TS 13,NS 10,]))
            , ((56,11),Reduce (9,[NS 9,TS 13,NS 10,]))
            , ((56,8),Reduce (9,[NS 9,TS 13,NS 10,]))
            , ((56,2),Reduce (9,[NS 9,TS 13,NS 10,]))
            , ((57,13),Reduce (10,[NS 4,]))
            , ((57,21),Shift 12)
            , ((57,17),Shift 34)
            , ((57,14),Shift 13)
            , ((57,19),Shift 28)
            , ((57,15),Shift 16)
            , ((57,7),Shift 17)
            , ((57,11),Reduce (10,[NS 4,]))
            , ((57,8),Reduce (10,[NS 4,]))
            , ((57,2),Reduce (10,[NS 4,]))
            , ((57,18),Shift 19)
            , ((57,20),Shift 20)
            , ((58,13),Reduce (10,[NS 4,TS 17,NS 10,]))
            , ((58,11),Reduce (10,[NS 4,TS 17,NS 10,]))
            , ((58,8),Reduce (10,[NS 4,TS 17,NS 10,]))
            , ((58,2),Reduce (10,[NS 4,TS 17,NS 10,]))
            , ((59,13),Reduce (5,[TS 15,NS 6,TS 16,]))
            , ((59,21),Reduce (5,[TS 15,NS 6,TS 16,]))
            , ((59,17),Reduce (5,[TS 15,NS 6,TS 16,]))
            , ((59,14),Reduce (5,[TS 15,NS 6,TS 16,]))
            , ((59,9),Reduce (5,[TS 15,NS 6,TS 16,]))
            , ((59,12),Reduce (5,[TS 15,NS 6,TS 16,]))
            , ((59,19),Reduce (5,[TS 15,NS 6,TS 16,]))
            , ((59,15),Reduce (5,[TS 15,NS 6,TS 16,]))
            , ((59,7),Reduce (5,[TS 15,NS 6,TS 16,]))
            , ((59,11),Reduce (5,[TS 15,NS 6,TS 16,]))
            , ((59,16),Reduce (5,[TS 15,NS 6,TS 16,]))
            , ((59,8),Reduce (5,[TS 15,NS 6,TS 16,]))
            , ((59,2),Reduce (5,[TS 15,NS 6,TS 16,]))
            , ((59,18),Reduce (5,[TS 15,NS 6,TS 16,]))
            , ((59,20),Reduce (5,[TS 15,NS 6,TS 16,]))
            , ((60,13),Reduce (5,[TS 7,NS 3,TS 8,]))
            , ((60,21),Reduce (5,[TS 7,NS 3,TS 8,]))
            , ((60,17),Reduce (5,[TS 7,NS 3,TS 8,]))
            , ((60,14),Reduce (5,[TS 7,NS 3,TS 8,]))
            , ((60,9),Reduce (5,[TS 7,NS 3,TS 8,]))
            , ((60,12),Reduce (5,[TS 7,NS 3,TS 8,]))
            , ((60,19),Reduce (5,[TS 7,NS 3,TS 8,]))
            , ((60,15),Reduce (5,[TS 7,NS 3,TS 8,]))
            , ((60,7),Reduce (5,[TS 7,NS 3,TS 8,]))
            , ((60,11),Reduce (5,[TS 7,NS 3,TS 8,]))
            , ((60,16),Reduce (5,[TS 7,NS 3,TS 8,]))
            , ((60,8),Reduce (5,[TS 7,NS 3,TS 8,]))
            , ((60,2),Reduce (5,[TS 7,NS 3,TS 8,]))
            , ((60,18),Reduce (5,[TS 7,NS 3,TS 8,]))
            , ((60,20),Reduce (5,[TS 7,NS 3,TS 8,]))
            , ((61,0),Reduce (12,[TS 3,TS 18,NS 13,TS 2,]))
            , ((61,21),Reduce (12,[TS 3,TS 18,NS 13,TS 2,]))
            , ((61,14),Reduce (12,[TS 3,TS 18,NS 13,TS 2,]))
            , ((61,3),Reduce (12,[TS 3,TS 18,NS 13,TS 2,]))
            , ((61,19),Reduce (12,[TS 3,TS 18,NS 13,TS 2,]))
            , ((61,15),Reduce (12,[TS 3,TS 18,NS 13,TS 2,]))
            , ((61,7),Reduce (12,[TS 3,TS 18,NS 13,TS 2,]))
            , ((61,18),Reduce (12,[TS 3,TS 18,NS 13,TS 2,]))
            , ((61,20),Reduce (12,[TS 3,TS 18,NS 13,TS 2,]))
            , ((61,4),Reduce (12,[TS 3,TS 18,NS 13,TS 2,]))
            , ((62,0),Reduce (12,[TS 4,TS 18,NS 15,TS 2,]))
            , ((62,21),Reduce (12,[TS 4,TS 18,NS 15,TS 2,]))
            , ((62,14),Reduce (12,[TS 4,TS 18,NS 15,TS 2,]))
            , ((62,3),Reduce (12,[TS 4,TS 18,NS 15,TS 2,]))
            , ((62,19),Reduce (12,[TS 4,TS 18,NS 15,TS 2,]))
            , ((62,15),Reduce (12,[TS 4,TS 18,NS 15,TS 2,]))
            , ((62,7),Reduce (12,[TS 4,TS 18,NS 15,TS 2,]))
            , ((62,18),Reduce (12,[TS 4,TS 18,NS 15,TS 2,]))
            , ((62,20),Reduce (12,[TS 4,TS 18,NS 15,TS 2,]))
            , ((62,4),Reduce (12,[TS 4,TS 18,NS 15,TS 2,]))
            , ((63,8),Shift 70)
            , ((64,7),Shift 41)
            , ((64,6),Shift 42)
            , ((65,16),Reduce (6,[NS 4,TS 13,NS 6,]))
            , ((66,8),Shift 72)
            , ((67,5),Reduce (16,[NS 16,NS 17,]))
            , ((67,19),Reduce (16,[NS 16,NS 17,]))
            , ((67,7),Reduce (16,[NS 16,NS 17,]))
            , ((67,8),Reduce (16,[NS 16,NS 17,]))
            , ((67,2),Reduce (16,[NS 16,NS 17,]))
            , ((67,18),Reduce (16,[NS 16,NS 17,]))
            , ((68,19),Shift 46)
            , ((68,7),Shift 47)
            , ((68,18),Shift 48)
            , ((69,8),Reduce (13,[NS 14,TS 5,NS 13,]))
            , ((69,2),Reduce (13,[NS 14,TS 5,NS 13,]))
            , ((70,5),Reduce (14,[TS 7,NS 13,TS 8,]))
            , ((70,8),Reduce (14,[TS 7,NS 13,TS 8,]))
            , ((70,2),Reduce (14,[TS 7,NS 13,TS 8,]))
            , ((71,8),Reduce (15,[NS 16,TS 5,NS 15,]))
            , ((71,2),Reduce (15,[NS 16,TS 5,NS 15,]))
            , ((72,5),Reduce (17,[TS 7,NS 15,TS 8,]))
            , ((72,19),Reduce (17,[TS 7,NS 15,TS 8,]))
            , ((72,7),Reduce (17,[TS 7,NS 15,TS 8,]))
            , ((72,8),Reduce (17,[TS 7,NS 15,TS 8,]))
            , ((72,2),Reduce (17,[TS 7,NS 15,TS 8,]))
            , ((0,0),Reduce (11,[]))
            ]
        , getReduceTable = YMap.fromAscList 
            [ ((0,12),1)
            , ((0,2),2)
            , ((0,3),3)
            , ((0,7),4)
            , ((0,8),5)
            , ((0,9),6)
            , ((0,10),7)
            , ((0,4),8)
            , ((0,5),9)
            , ((0,11),10)
            , ((0,1),11)
            , ((1,12),1)
            , ((1,3),3)
            , ((1,7),4)
            , ((1,8),5)
            , ((1,9),6)
            , ((1,10),7)
            , ((1,4),8)
            , ((1,5),9)
            , ((1,11),22)
            , ((8,5),33)
            , ((16,6),26)
            , ((16,4),27)
            , ((16,5),9)
            , ((17,3),31)
            , ((17,7),4)
            , ((17,8),5)
            , ((17,9),6)
            , ((17,10),7)
            , ((17,4),8)
            , ((17,5),9)
            , ((18,3),30)
            , ((18,7),4)
            , ((18,8),5)
            , ((18,9),6)
            , ((18,10),7)
            , ((18,4),8)
            , ((18,5),9)
            , ((24,13),39)
            , ((24,14),40)
            , ((25,15),43)
            , ((25,16),44)
            , ((25,17),45)
            , ((27,5),33)
            , ((32,8),54)
            , ((32,9),6)
            , ((32,10),7)
            , ((32,4),53)
            , ((32,5),9)
            , ((34,10),58)
            , ((34,4),57)
            , ((34,5),9)
            , ((35,7),52)
            , ((35,8),5)
            , ((35,9),6)
            , ((35,10),7)
            , ((35,4),53)
            , ((35,5),9)
            , ((36,8),55)
            , ((36,9),6)
            , ((36,10),7)
            , ((36,4),53)
            , ((36,5),9)
            , ((37,3),51)
            , ((37,7),4)
            , ((37,8),5)
            , ((37,9),6)
            , ((37,10),7)
            , ((37,4),8)
            , ((37,5),9)
            , ((38,10),56)
            , ((38,4),57)
            , ((38,5),9)
            , ((41,13),63)
            , ((41,14),40)
            , ((44,17),67)
            , ((47,15),66)
            , ((47,16),44)
            , ((47,17),45)
            , ((49,6),65)
            , ((49,4),27)
            , ((49,5),9)
            , ((53,5),33)
            , ((57,5),33)
            , ((64,13),69)
            , ((64,14),40)
            , ((68,15),71)
            , ((68,16),44)
            , ((0,12),1)
            ]
        }

