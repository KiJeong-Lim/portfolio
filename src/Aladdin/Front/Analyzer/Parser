\hshead {
    module Aladdin.Front.Analyzer.Parser where

    import Aladdin.Front.Analyzer.Grammar
    import Aladdin.Front.Header
}

\target {
    token-type: "AladdinToken (String, Maybe (Fixity, Precedence))"
    parser-name: "runParser"
    result-type: "Either TermRep [Decl]"
    start: $Either $Query ($Sequence $Decl)
    terminals:
        "AT_nat_lit loc this": $natlit 0 none
        "AT_chr_lit loc this": $chrlit 0 none
        "AT_str_lit loc this": $strlit 0 none
        "AT_keyword loc \".\"": $dot 0 none
        "AT_keyword loc \"(\"": $lparen 0 none
        "AT_keyword loc \")\"": $rparen 0 none
        "AT_keyword loc \"[\"": $lbracket 0 none
        "AT_keyword loc \"[\"": $rbracket 0 none
        "AT_keyword loc \"kind\"": $kind 0 none
        "AT_keyword loc \"type\"": $type 0 none
        "AT_smallid loc (\"\\\", _)": $bslash 0 none
        "AT_smallid loc (\",\", _)": $comma 0 none
        "AT_smallid loc (\"?-\", _)": $quest 0 none
        "AT_largeid loc this": $largeid 65 none
        "AT_smallid loc (this, Nothing)": $name 65 none
        "AT_smallid loc (this, Just (Prefix, 0))": $prefix0 10 $right
        "AT_smallid loc (this, Just (InfixL, 0))": $infixl0 10 $left
        "AT_smallid loc (this, Just (InfixR, 0))": $infixr0 10 $right
        "AT_smallid loc (this, Just (InfixN, 0))": $infixn0 10 $none
        "AT_smallid loc (this, Just (Prefix, 1))": $prefix1 15 $right
        "AT_smallid loc (this, Just (InfixL, 1))": $infixl1 15 $left
        "AT_smallid loc (this, Just (InfixR, 1))": $infixr1 15 $right
        "AT_smallid loc (this, Just (InfixN, 1))": $infixn1 15 $none
        "AT_smallid loc (this, Just (Prefix, 2))": $prefix2 20 $right
        "AT_smallid loc (this, Just (InfixL, 2))": $infixl2 20 $left
        "AT_smallid loc (this, Just (InfixR, 2))": $infixr2 20 $right
        "AT_smallid loc (this, Just (InfixN, 2))": $infixn2 20 $none
        "AT_smallid loc (this, Just (Prefix, 3))": $prefix3 25 $right
        "AT_smallid loc (this, Just (InfixL, 3))": $infixl3 25 $left
        "AT_smallid loc (this, Just (InfixR, 3))": $infixr3 25 $right
        "AT_smallid loc (this, Just (InfixN, 3))": $infixn3 25 $none
        "AT_smallid loc (this, Just (Prefix, 4))": $prefix4 30 $right
        "AT_smallid loc (this, Just (InfixL, 4))": $infixl4 30 $left
        "AT_smallid loc (this, Just (InfixR, 4))": $infixr4 30 $right
        "AT_smallid loc (this, Just (InfixN, 4))": $infixn4 30 $none
        "AT_smallid loc (this, Just (Prefix, 5))": $prefix5 35 $right
        "AT_smallid loc (this, Just (InfixL, 5))": $infixl5 35 $left
        "AT_smallid loc (this, Just (InfixR, 5))": $infixr5 35 $right
        "AT_smallid loc (this, Just (InfixN, 5))": $infixn5 35 $none
        "AT_smallid loc (this, Just (Prefix, 6))": $prefix6 40 $right
        "AT_smallid loc (this, Just (InfixL, 6))": $infixl6 40 $left
        "AT_smallid loc (this, Just (InfixR, 6))": $infixr6 40 $right
        "AT_smallid loc (this, Just (InfixN, 6))": $infixn6 40 $none
        "AT_smallid loc (this, Just (Prefix, 7))": $prefix7 45 $right
        "AT_smallid loc (this, Just (InfixL, 7))": $infixl7 45 $left
        "AT_smallid loc (this, Just (InfixR, 7))": $infixr7 45 $right
        "AT_smallid loc (this, Just (InfixN, 7))": $infixn7 45 $none
        "AT_smallid loc (this, Just (Prefix, 8))": $prefix8 50 $right
        "AT_smallid loc (this, Just (InfixL, 8))": $infixl8 50 $left
        "AT_smallid loc (this, Just (InfixR, 8))": $infixr8 50 $right
        "AT_smallid loc (this, Just (InfixN, 8))": $infixn8 50 $none
        "AT_smallid loc (this, Just (Prefix, 9))": $prefix9 55 $right
        "AT_smallid loc (this, Just (InfixL, 9))": $infixl9 55 $left
        "AT_smallid loc (this, Just (InfixR, 9))": $infixr9 55 $right
        "AT_smallid loc (this, Just (InfixN, 9))": $infixn9 55 $none
        "AT_smallid loc (this, Just (Prefix, 10))": $prefix10 60 $right
        "AT_smallid loc (this, Just (InfixL, 10))": $infixl10 60 $left
        "AT_smallid loc (this, Just (InfixR, 10))": $infixr10 60 $right
        "AT_smallid loc (this, Just (InfixN, 10))": $infixn10 60 $none
}

\define $Query : "TermRep" {
    10 [$quest, $TermRep0, $semicolon]:
        $2
}

\define $Decl : "Decl" {
    10 [$kind, $smallid, $KindRep0, $semicolon]:
        KindDecl ($1.loc <> $4.loc) $2.this $3
    10 [$type, $smallid, $TypeRep0, $semicolon]:
        TypeDecl ($1.loc <> $4.loc) $2.this $3
    10 [$TermRep0, $semicolon]:
        FactDecl (getSLoc $1 <> $2.loc) $1
}

\define $

\define $Sequence ($Elem : "a") : "[a]" {
    50 []:
        []
    50 [$Elem, $Sequence $Elem]:
        $1 : $2
}

\define $Either ($Left : "a") ($Right : "b") : "Either a b" {
    50 [$Left]:
        Left $1
    50 [$Right]:
        Right $1
}

\hstail {

}
