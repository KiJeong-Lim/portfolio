\hshead {
    module Aladdin.Front.Analyzer.Parser where
    import Aladdin.Front.Analyzer.Grammar
    import Aladdin.Front.Header
}

\target {
    token-type: "AladinToken"
    parser-name: "runParser"
    result-type: "Either TermRep [Decl]"
    start: $Either $Query ($Sequence $Decl)
    terminals:
        "ATQuest loc": $quest 50 none
        "ATSemicolon loc": $semicolon 50 none
        "ATKind loc": $kind 50 none
        "ATType loc": $type 50 none
        "ATArrow loc": $arrow 50 none
        "ATStar loc": $star 50 none
        "ATLParen loc": $lparen 50 none
        "ATRParen loc": $rparen 50 none
        "ATIf loc": $if 50 none
        "ATBSlash loc": $bslash 50 none
        "ATOr loc": $or 50 none
        "ATImply loc": $imply 50 none
        "ATAnd loc": $and 50 none
        "ATCut loc": $cut 50 none
        "ATLBracket loc": $lbracket 50 none
        "ATRBracket loc": $rbracket 50 none
        "ATCons loc": $cons 50 none
        "ATSmallId loc this": $smallid 50 none
        "ATLargeId loc this": $largeid 50 none
        "ATLiteral loc (StrLit this)": $strlit 50 none
        "ATLiteral loc (ChrLit this)": $chrlit 50 none
}

\define $Query : "TermRep" {
    10 [$quest, $TermRep0, $semicolon]:
        $2
}

\define $Decl : "Decl" {
    10 [$kind, $smallid, $KindRep0, $semicolon]:
        KindDecl ($1.loc <> $4.loc) $2.this $3
    10 [$type, $smallid, $TypeRep0, $semicolon]:
        TypeDecl ($1.loc <> $4.loc) $2.this $3
    10 [$TermRep0, $semicolon]:
        FactDecl (getSLoc $1 <> $2.loc) $1
}

\define $KindRep0 : "KindRep" {
    50 [$KindRep1, $arrow, $KindRep0]:
        RKArr (getSLoc $1 <> getSLoc $3) $1 $3
    50 [$KindRep1]:
        $1
}

\define $KindRep1 : "KindRep" {
    50 [$star]:
        RStar $1.loc
    50 [$lparen, $KindRep0, $rparen]:
        RKInd ($1.loc <> $3.loc) $2
}

\define $TypeRep0 : "TypeRep" {
    50 [$TypeRep1, $arrow, $TypeRep0]:
        RTyArr (getSLoc $1 <> getSLoc $3) $1 $3
    50 [$TypeRep1]:
        $1
}

\define $TypeRep1 : "TypeRep" {
    50 [$TypeRep1, $TypeRep2]:
        RTyApp (getSLoc $1 <> getSLoc $2) $1 $2
    50 [$TypeRep2]:
        $1
}

\define $TypeRep2 : "TypeRep" {
    50 [$smallid]:
        RTyCon $1.loc $1.this
    50 [$largeid]:
        RTyVar $1.loc $1.this
    50 [$lparen, $TypeRep0, $rparen]:
        RTyInd ($1.loc <> $3.loc) $2
}

\define $TermRep0 : "TermRep" {
    10 [$largeid, $bslash, $TermRep0]:
        RAbs ($1.loc <> getSLoc $3) $1.this $3
    10 [$TermRep5, $if, $TermRep1]:
        RApp (getSLoc $1 <> getSLoc $3) (RApp (getSLoc $1 <> $2.loc) (RCon $2.loc ":-") $1) $3
    10 [$TermRep1]:
        $1
}

\define $TermRep1 : "TermRep" {
    20 [$TermRep1, $or, $TermRep2]:
        RApp (getSLoc $1 <> getSLoc $3) (RApp (getSLoc $1 <> $2.loc) (RCon $2.loc ";") $1) $3
    20 [$TermRep2]:
        $1
}

\define $TermRep2 : "TermRep" {
    30 [$TermRep5, $imply, $TermRep2]:
        RApp (getSLoc $1 <> getSLoc $3) (RApp (getSLoc $1 <> $2.loc) (RCon $2.loc "=>") $1) $3
    30 [$TermRep3]:
        $1
}

\define $TermRep3 : "TermRep" {
    40 [$TermRep3, $and, $TermRep4]:
        RApp (getSLoc $1 <> getSLoc $3) (RApp (getSLoc $1 <> $2.loc) (RCon $2.loc ",") $1) $3
    40 [$TermRep4]:
        $1
}

\define $TermRep4 : "TermRep" {
    50 [$TermRep5, $cons, $TermRep4]:
        RApp (getSLoc $1 <> getSLoc $3) (RApp (getSLoc $1 <> $2.loc) (RCon $2.loc "::") $1) $3
    50 [$TermRep5]:
        $1
}

\define $TermRep5 : "TermRep" {
    60 [$TermRep5, $TermRep6]:
        RApp (getSLoc $1 <> getSLoc $2) $1 $2
    60 [$TermRep6]:
        $1
}

\define $TermRep6 : "TermRep" {
    70 [$cut]:
        RCon $1.loc "!"
    70 [$smallid]:
        RCon $1.loc $1.this
    70 [$largeid]:
        RVar $1.loc $1.this
    70 [$strlit]:
        mkStrLit $1.loc $1.this
    70 [$chrlit]:
        mkChrLit $1.loc $1.this
    70 [$lbracket, $rbracket]:
        RCon ($1.loc <> $2.loc) "[]"
    70 [$lbracket, $ListBody, $rbracket]:
        RInd ($1.loc <> $3.loc) $2
    70 [$lparen, $TermRep0, $rparen]:
        RInd ($1.loc <> $3.loc) $2
}

\define $Sequence ($Elem : "a") : "[a]" {
    50 []:
        []
    50 [$Elem, $Sequence $Elem]:
        $1 : $2
}

\define $Either ($Left : "a") ($Right : "b") : "Either a b" {
    50 [$Left]:
        Left $1
    50 [$Right]:
        Right $1
}

\define $ListBody : "TermRep" {
    90 [$TermRep5]:
        RApp (getSLoc $1) (RApp (getSLoc $1) (RCon (getSLoc $1) "::") $1) (RCon (getSLoc $1) "[]")
    90 [$TermRep5, $and, $ListBody]:
        RApp (getSLoc $1 <> getSLoc $3) (RApp (getSLoc $1 <> $2.loc) (RCon $2.loc "::") $1) $3
}

\hstail {
    mkChrLit :: SLoc -> Char -> TermRep
    mkChrLit loc ch = RCon loc ("chr_" ++ show ch)

    mkStrLit :: SLoc -> String -> TermRep
    mkStrLit loc [] = RCon loc "[]"
    mkStrLit loc (ch : str) = RApp loc (RApp loc (RCon loc "::") (mkChrLit loc ch)) (mkStrLit loc str)
}
