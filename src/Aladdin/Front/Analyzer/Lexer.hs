module Aladdin.Front.Analyzer.Lexer where
import Aladdin.Front.Analyzer.Grammar
import Aladdin.Front.Header

import qualified Control.Monad.Trans.State.Strict as XState
import qualified Data.Functor.Identity as XIdentity
import qualified Data.Map.Strict as XMap
import qualified Data.Set as XSet

data DFA
    = DFA
        { getInitialQOfDFA :: Int
        , getFinalQsOfDFA :: XMap.Map Int Int
        , getTransitionsOfDFA :: XMap.Map (Int, Char) Int
        , getMarkedQsOfDFA :: XMap.Map Int (XSet.Set Int)
        }
    deriving ()



runTokenizer :: String -> Either (Int, Int) [AladinToken]
runTokenizer = doLexing . addLoc 1 1 where
    theDFA :: DFA
    theDFA = DFA
        { getInitialQOfDFA = 0
        , getFinalQsOfDFA = XMap.fromAscList [(1, 23), (2, 14), (6, 7), (7, 8), (8, 6), (9, 13), (11, 2), (13, 11), (16, 19), (17, 15), (18, 10), (19, 16), (20, 19), (21, 18), (22, 18), (23, 18), (25, 18), (26, 18), (28, 1), (29, 22), (30, 5), (31, 9), (32, 17), (33, 12), (35, 20), (39, 18), (40, 18), (47, 21), (53, 3), (54, 4), ]
        , getTransitionsOfDFA = XMap.fromAscList 
        [ ((0, '\n'), 1), ((0, ' '), 1), ((0, '!'), 2), ((0, '"'), 3), ((0, '\''), 5), ((0, '('), 6), ((0, ')'), 7), ((0, '*'), 8), ((0, ','), 9), ((0, '-'), 10), ((0, '.'), 11), ((0, ':'), 12), ((0, ';'), 13), ((0, '='), 14), ((0, '?'), 15), ((0, 'A'), 16), ((0, 'B'), 16), ((0, 'C'), 16), ((0, 'D'), 16), ((0, 'E'), 16), ((0, 'F'), 16), ((0, 'G'), 16), ((0, 'H'), 16), ((0, 'I'), 16), ((0, 'J'), 16), ((0, 'K'), 16), ((0, 'L'), 16), ((0, 'M'), 16), ((0, 'N'), 16), ((0, 'O'), 16), ((0, 'P'), 16), ((0, 'Q'), 16), ((0, 'R'), 16), ((0, 'S'), 16), ((0, 'T'), 16), ((0, 'U'), 16), ((0, 'V'), 16), ((0, 'W'), 16), ((0, 'X'), 16), ((0, 'Y'), 16), ((0, 'Z'), 16), ((0, '['), 17), ((0, '\\'), 18), ((0, ']'), 19), ((0, '_'), 20), ((0, 'a'), 21), ((0, 'b'), 21), ((0, 'c'), 21), ((0, 'd'), 21), ((0, 'e'), 21), ((0, 'f'), 21), ((0, 'g'), 21), ((0, 'h'), 21), ((0, 'i'), 21), ((0, 'j'), 21), ((0, 'k'), 22), ((0, 'l'), 21), ((0, 'm'), 21), ((0, 'n'), 21), ((0, 'o'), 21), ((0, 'p'), 21), ((0, 'q'), 21), ((0, 'r'), 21), ((0, 's'), 21), ((0, 't'), 23), ((0, 'u'), 21), ((0, 'v'), 21), ((0, 'w'), 21), ((0, 'x'), 21), ((0, 'y'), 21), ((0, 'z'), 21), 
        , ((1, '\n'), 1), ((1, ' '), 1), 
        , ((3, ' '), 3), ((3, '!'), 3), ((3, '"'), 35), ((3, '#'), 3), ((3, '$'), 3), ((3, '%'), 3), ((3, '&'), 3), ((3, '\''), 3), ((3, '('), 3), ((3, ')'), 3), ((3, '*'), 3), ((3, '+'), 3), ((3, ','), 3), ((3, '-'), 3), ((3, '.'), 3), ((3, '/'), 3), ((3, '0'), 3), ((3, '1'), 3), ((3, '2'), 3), ((3, '3'), 3), ((3, '4'), 3), ((3, '5'), 3), ((3, '6'), 3), ((3, '7'), 3), ((3, '8'), 3), ((3, '9'), 3), ((3, ':'), 3), ((3, ';'), 3), ((3, '<'), 3), ((3, '='), 3), ((3, '>'), 3), ((3, '?'), 3), ((3, '@'), 3), ((3, 'A'), 3), ((3, 'B'), 3), ((3, 'C'), 3), ((3, 'D'), 3), ((3, 'E'), 3), ((3, 'F'), 3), ((3, 'G'), 3), ((3, 'H'), 3), ((3, 'I'), 3), ((3, 'J'), 3), ((3, 'K'), 3), ((3, 'L'), 3), ((3, 'M'), 3), ((3, 'N'), 3), ((3, 'O'), 3), ((3, 'P'), 3), ((3, 'Q'), 3), ((3, 'R'), 3), ((3, 'S'), 3), ((3, 'T'), 3), ((3, 'U'), 3), ((3, 'V'), 3), ((3, 'W'), 3), ((3, 'X'), 3), ((3, 'Y'), 3), ((3, 'Z'), 3), ((3, '['), 3), ((3, '\\'), 36), ((3, ']'), 3), ((3, '^'), 3), ((3, '_'), 3), ((3, '`'), 3), ((3, 'a'), 3), ((3, 'b'), 3), ((3, 'c'), 3), ((3, 'd'), 3), ((3, 'e'), 3), ((3, 'f'), 3), ((3, 'g'), 3), ((3, 'h'), 3), ((3, 'i'), 3), ((3, 'j'), 3), ((3, 'k'), 3), ((3, 'l'), 3), ((3, 'm'), 3), ((3, 'n'), 3), ((3, 'o'), 3), ((3, 'p'), 3), ((3, 'q'), 3), ((3, 'r'), 3), ((3, 's'), 3), ((3, 't'), 3), ((3, 'u'), 3), ((3, 'v'), 3), ((3, 'w'), 3), ((3, 'x'), 3), ((3, 'y'), 3), ((3, 'z'), 3), ((3, '{'), 3), ((3, '|'), 3), ((3, '}'), 3), ((3, '~'), 3), 
        , ((5, ' '), 37), ((5, '!'), 37), ((5, '#'), 37), ((5, '$'), 37), ((5, '%'), 37), ((5, '&'), 37), ((5, '\''), 37), ((5, '('), 37), ((5, ')'), 37), ((5, '*'), 37), ((5, '+'), 37), ((5, ','), 37), ((5, '-'), 37), ((5, '.'), 37), ((5, '/'), 37), ((5, '0'), 37), ((5, '1'), 37), ((5, '2'), 37), ((5, '3'), 37), ((5, '4'), 37), ((5, '5'), 37), ((5, '6'), 37), ((5, '7'), 37), ((5, '8'), 37), ((5, '9'), 37), ((5, ':'), 37), ((5, ';'), 37), ((5, '<'), 37), ((5, '='), 37), ((5, '>'), 37), ((5, '?'), 37), ((5, '@'), 37), ((5, 'A'), 37), ((5, 'B'), 37), ((5, 'C'), 37), ((5, 'D'), 37), ((5, 'E'), 37), ((5, 'F'), 37), ((5, 'G'), 37), ((5, 'H'), 37), ((5, 'I'), 37), ((5, 'J'), 37), ((5, 'K'), 37), ((5, 'L'), 37), ((5, 'M'), 37), ((5, 'N'), 37), ((5, 'O'), 37), ((5, 'P'), 37), ((5, 'Q'), 37), ((5, 'R'), 37), ((5, 'S'), 37), ((5, 'T'), 37), ((5, 'U'), 37), ((5, 'V'), 37), ((5, 'W'), 37), ((5, 'X'), 37), ((5, 'Y'), 37), ((5, 'Z'), 37), ((5, '['), 37), ((5, '\\'), 38), ((5, ']'), 37), ((5, '^'), 37), ((5, '_'), 37), ((5, '`'), 37), ((5, 'a'), 37), ((5, 'b'), 37), ((5, 'c'), 37), ((5, 'd'), 37), ((5, 'e'), 37), ((5, 'f'), 37), ((5, 'g'), 37), ((5, 'h'), 37), ((5, 'i'), 37), ((5, 'j'), 37), ((5, 'k'), 37), ((5, 'l'), 37), ((5, 'm'), 37), ((5, 'n'), 37), ((5, 'o'), 37), ((5, 'p'), 37), ((5, 'q'), 37), ((5, 'r'), 37), ((5, 's'), 37), ((5, 't'), 37), ((5, 'u'), 37), ((5, 'v'), 37), ((5, 'w'), 37), ((5, 'x'), 37), ((5, 'y'), 37), ((5, 'z'), 37), ((5, '{'), 37), ((5, '|'), 37), ((5, '}'), 37), ((5, '~'), 37), 
        , ((10, '-'), 29), ((10, '>'), 30), 
        , ((12, '-'), 31), ((12, ':'), 32), 
        , ((14, '>'), 33), 
        , ((15, '-'), 28), 
        , ((16, '0'), 16), ((16, '1'), 16), ((16, '2'), 16), ((16, '3'), 16), ((16, '4'), 16), ((16, '5'), 16), ((16, '6'), 16), ((16, '7'), 16), ((16, '8'), 16), ((16, '9'), 16), ((16, 'A'), 16), ((16, 'B'), 16), ((16, 'C'), 16), ((16, 'D'), 16), ((16, 'E'), 16), ((16, 'F'), 16), ((16, 'G'), 16), ((16, 'H'), 16), ((16, 'I'), 16), ((16, 'J'), 16), ((16, 'K'), 16), ((16, 'L'), 16), ((16, 'M'), 16), ((16, 'N'), 16), ((16, 'O'), 16), ((16, 'P'), 16), ((16, 'Q'), 16), ((16, 'R'), 16), ((16, 'S'), 16), ((16, 'T'), 16), ((16, 'U'), 16), ((16, 'V'), 16), ((16, 'W'), 16), ((16, 'X'), 16), ((16, 'Y'), 16), ((16, 'Z'), 16), ((16, '_'), 16), ((16, 'a'), 16), ((16, 'b'), 16), ((16, 'c'), 16), ((16, 'd'), 16), ((16, 'e'), 16), ((16, 'f'), 16), ((16, 'g'), 16), ((16, 'h'), 16), ((16, 'i'), 16), ((16, 'j'), 16), ((16, 'k'), 16), ((16, 'l'), 16), ((16, 'm'), 16), ((16, 'n'), 16), ((16, 'o'), 16), ((16, 'p'), 16), ((16, 'q'), 16), ((16, 'r'), 16), ((16, 's'), 16), ((16, 't'), 16), ((16, 'u'), 16), ((16, 'v'), 16), ((16, 'w'), 16), ((16, 'x'), 16), ((16, 'y'), 16), ((16, 'z'), 16), 
        , ((21, '0'), 21), ((21, '1'), 21), ((21, '2'), 21), ((21, '3'), 21), ((21, '4'), 21), ((21, '5'), 21), ((21, '6'), 21), ((21, '7'), 21), ((21, '8'), 21), ((21, '9'), 21), ((21, 'A'), 21), ((21, 'B'), 21), ((21, 'C'), 21), ((21, 'D'), 21), ((21, 'E'), 21), ((21, 'F'), 21), ((21, 'G'), 21), ((21, 'H'), 21), ((21, 'I'), 21), ((21, 'J'), 21), ((21, 'K'), 21), ((21, 'L'), 21), ((21, 'M'), 21), ((21, 'N'), 21), ((21, 'O'), 21), ((21, 'P'), 21), ((21, 'Q'), 21), ((21, 'R'), 21), ((21, 'S'), 21), ((21, 'T'), 21), ((21, 'U'), 21), ((21, 'V'), 21), ((21, 'W'), 21), ((21, 'X'), 21), ((21, 'Y'), 21), ((21, 'Z'), 21), ((21, '_'), 21), ((21, 'a'), 21), ((21, 'b'), 21), ((21, 'c'), 21), ((21, 'd'), 21), ((21, 'e'), 21), ((21, 'f'), 21), ((21, 'g'), 21), ((21, 'h'), 21), ((21, 'i'), 21), ((21, 'j'), 21), ((21, 'k'), 21), ((21, 'l'), 21), ((21, 'm'), 21), ((21, 'n'), 21), ((21, 'o'), 21), ((21, 'p'), 21), ((21, 'q'), 21), ((21, 'r'), 21), ((21, 's'), 21), ((21, 't'), 21), ((21, 'u'), 21), ((21, 'v'), 21), ((21, 'w'), 21), ((21, 'x'), 21), ((21, 'y'), 21), ((21, 'z'), 21), 
        , ((22, '0'), 21), ((22, '1'), 21), ((22, '2'), 21), ((22, '3'), 21), ((22, '4'), 21), ((22, '5'), 21), ((22, '6'), 21), ((22, '7'), 21), ((22, '8'), 21), ((22, '9'), 21), ((22, 'A'), 21), ((22, 'B'), 21), ((22, 'C'), 21), ((22, 'D'), 21), ((22, 'E'), 21), ((22, 'F'), 21), ((22, 'G'), 21), ((22, 'H'), 21), ((22, 'I'), 21), ((22, 'J'), 21), ((22, 'K'), 21), ((22, 'L'), 21), ((22, 'M'), 21), ((22, 'N'), 21), ((22, 'O'), 21), ((22, 'P'), 21), ((22, 'Q'), 21), ((22, 'R'), 21), ((22, 'S'), 21), ((22, 'T'), 21), ((22, 'U'), 21), ((22, 'V'), 21), ((22, 'W'), 21), ((22, 'X'), 21), ((22, 'Y'), 21), ((22, 'Z'), 21), ((22, '_'), 21), ((22, 'a'), 21), ((22, 'b'), 21), ((22, 'c'), 21), ((22, 'd'), 21), ((22, 'e'), 21), ((22, 'f'), 21), ((22, 'g'), 21), ((22, 'h'), 21), ((22, 'i'), 25), ((22, 'j'), 21), ((22, 'k'), 21), ((22, 'l'), 21), ((22, 'm'), 21), ((22, 'n'), 21), ((22, 'o'), 21), ((22, 'p'), 21), ((22, 'q'), 21), ((22, 'r'), 21), ((22, 's'), 21), ((22, 't'), 21), ((22, 'u'), 21), ((22, 'v'), 21), ((22, 'w'), 21), ((22, 'x'), 21), ((22, 'y'), 21), ((22, 'z'), 21), 
        , ((23, '0'), 21), ((23, '1'), 21), ((23, '2'), 21), ((23, '3'), 21), ((23, '4'), 21), ((23, '5'), 21), ((23, '6'), 21), ((23, '7'), 21), ((23, '8'), 21), ((23, '9'), 21), ((23, 'A'), 21), ((23, 'B'), 21), ((23, 'C'), 21), ((23, 'D'), 21), ((23, 'E'), 21), ((23, 'F'), 21), ((23, 'G'), 21), ((23, 'H'), 21), ((23, 'I'), 21), ((23, 'J'), 21), ((23, 'K'), 21), ((23, 'L'), 21), ((23, 'M'), 21), ((23, 'N'), 21), ((23, 'O'), 21), ((23, 'P'), 21), ((23, 'Q'), 21), ((23, 'R'), 21), ((23, 'S'), 21), ((23, 'T'), 21), ((23, 'U'), 21), ((23, 'V'), 21), ((23, 'W'), 21), ((23, 'X'), 21), ((23, 'Y'), 21), ((23, 'Z'), 21), ((23, '_'), 21), ((23, 'a'), 21), ((23, 'b'), 21), ((23, 'c'), 21), ((23, 'd'), 21), ((23, 'e'), 21), ((23, 'f'), 21), ((23, 'g'), 21), ((23, 'h'), 21), ((23, 'i'), 21), ((23, 'j'), 21), ((23, 'k'), 21), ((23, 'l'), 21), ((23, 'm'), 21), ((23, 'n'), 21), ((23, 'o'), 21), ((23, 'p'), 21), ((23, 'q'), 21), ((23, 'r'), 21), ((23, 's'), 21), ((23, 't'), 21), ((23, 'u'), 21), ((23, 'v'), 21), ((23, 'w'), 21), ((23, 'x'), 21), ((23, 'y'), 26), ((23, 'z'), 21), 
        , ((25, '0'), 21), ((25, '1'), 21), ((25, '2'), 21), ((25, '3'), 21), ((25, '4'), 21), ((25, '5'), 21), ((25, '6'), 21), ((25, '7'), 21), ((25, '8'), 21), ((25, '9'), 21), ((25, 'A'), 21), ((25, 'B'), 21), ((25, 'C'), 21), ((25, 'D'), 21), ((25, 'E'), 21), ((25, 'F'), 21), ((25, 'G'), 21), ((25, 'H'), 21), ((25, 'I'), 21), ((25, 'J'), 21), ((25, 'K'), 21), ((25, 'L'), 21), ((25, 'M'), 21), ((25, 'N'), 21), ((25, 'O'), 21), ((25, 'P'), 21), ((25, 'Q'), 21), ((25, 'R'), 21), ((25, 'S'), 21), ((25, 'T'), 21), ((25, 'U'), 21), ((25, 'V'), 21), ((25, 'W'), 21), ((25, 'X'), 21), ((25, 'Y'), 21), ((25, 'Z'), 21), ((25, '_'), 21), ((25, 'a'), 21), ((25, 'b'), 21), ((25, 'c'), 21), ((25, 'd'), 21), ((25, 'e'), 21), ((25, 'f'), 21), ((25, 'g'), 21), ((25, 'h'), 21), ((25, 'i'), 21), ((25, 'j'), 21), ((25, 'k'), 21), ((25, 'l'), 21), ((25, 'm'), 21), ((25, 'n'), 39), ((25, 'o'), 21), ((25, 'p'), 21), ((25, 'q'), 21), ((25, 'r'), 21), ((25, 's'), 21), ((25, 't'), 21), ((25, 'u'), 21), ((25, 'v'), 21), ((25, 'w'), 21), ((25, 'x'), 21), ((25, 'y'), 21), ((25, 'z'), 21), 
        , ((26, '0'), 21), ((26, '1'), 21), ((26, '2'), 21), ((26, '3'), 21), ((26, '4'), 21), ((26, '5'), 21), ((26, '6'), 21), ((26, '7'), 21), ((26, '8'), 21), ((26, '9'), 21), ((26, 'A'), 21), ((26, 'B'), 21), ((26, 'C'), 21), ((26, 'D'), 21), ((26, 'E'), 21), ((26, 'F'), 21), ((26, 'G'), 21), ((26, 'H'), 21), ((26, 'I'), 21), ((26, 'J'), 21), ((26, 'K'), 21), ((26, 'L'), 21), ((26, 'M'), 21), ((26, 'N'), 21), ((26, 'O'), 21), ((26, 'P'), 21), ((26, 'Q'), 21), ((26, 'R'), 21), ((26, 'S'), 21), ((26, 'T'), 21), ((26, 'U'), 21), ((26, 'V'), 21), ((26, 'W'), 21), ((26, 'X'), 21), ((26, 'Y'), 21), ((26, 'Z'), 21), ((26, '_'), 21), ((26, 'a'), 21), ((26, 'b'), 21), ((26, 'c'), 21), ((26, 'd'), 21), ((26, 'e'), 21), ((26, 'f'), 21), ((26, 'g'), 21), ((26, 'h'), 21), ((26, 'i'), 21), ((26, 'j'), 21), ((26, 'k'), 21), ((26, 'l'), 21), ((26, 'm'), 21), ((26, 'n'), 21), ((26, 'o'), 21), ((26, 'p'), 40), ((26, 'q'), 21), ((26, 'r'), 21), ((26, 's'), 21), ((26, 't'), 21), ((26, 'u'), 21), ((26, 'v'), 21), ((26, 'w'), 21), ((26, 'x'), 21), ((26, 'y'), 21), ((26, 'z'), 21), 
        , ((29, ' '), 29), ((29, '!'), 29), ((29, '"'), 29), ((29, '#'), 29), ((29, '$'), 29), ((29, '%'), 29), ((29, '&'), 29), ((29, '\''), 29), ((29, '('), 29), ((29, ')'), 29), ((29, '*'), 29), ((29, '+'), 29), ((29, ','), 29), ((29, '-'), 29), ((29, '.'), 29), ((29, '/'), 29), ((29, '0'), 29), ((29, '1'), 29), ((29, '2'), 29), ((29, '3'), 29), ((29, '4'), 29), ((29, '5'), 29), ((29, '6'), 29), ((29, '7'), 29), ((29, '8'), 29), ((29, '9'), 29), ((29, ':'), 29), ((29, ';'), 29), ((29, '<'), 29), ((29, '='), 29), ((29, '>'), 29), ((29, '?'), 29), ((29, '@'), 29), ((29, 'A'), 29), ((29, 'B'), 29), ((29, 'C'), 29), ((29, 'D'), 29), ((29, 'E'), 29), ((29, 'F'), 29), ((29, 'G'), 29), ((29, 'H'), 29), ((29, 'I'), 29), ((29, 'J'), 29), ((29, 'K'), 29), ((29, 'L'), 29), ((29, 'M'), 29), ((29, 'N'), 29), ((29, 'O'), 29), ((29, 'P'), 29), ((29, 'Q'), 29), ((29, 'R'), 29), ((29, 'S'), 29), ((29, 'T'), 29), ((29, 'U'), 29), ((29, 'V'), 29), ((29, 'W'), 29), ((29, 'X'), 29), ((29, 'Y'), 29), ((29, 'Z'), 29), ((29, '['), 29), ((29, '\\'), 29), ((29, ']'), 29), ((29, '^'), 29), ((29, '_'), 29), ((29, '`'), 29), ((29, 'a'), 29), ((29, 'b'), 29), ((29, 'c'), 29), ((29, 'd'), 29), ((29, 'e'), 29), ((29, 'f'), 29), ((29, 'g'), 29), ((29, 'h'), 29), ((29, 'i'), 29), ((29, 'j'), 29), ((29, 'k'), 29), ((29, 'l'), 29), ((29, 'm'), 29), ((29, 'n'), 29), ((29, 'o'), 29), ((29, 'p'), 29), ((29, 'q'), 29), ((29, 'r'), 29), ((29, 's'), 29), ((29, 't'), 29), ((29, 'u'), 29), ((29, 'v'), 29), ((29, 'w'), 29), ((29, 'x'), 29), ((29, 'y'), 29), ((29, 'z'), 29), ((29, '{'), 29), ((29, '|'), 29), ((29, '}'), 29), ((29, '~'), 29), 
        , ((36, '"'), 3), ((36, '\''), 3), ((36, '\\'), 3), ((36, 'n'), 3), ((36, 't'), 3), 
        , ((37, '\''), 47), 
        , ((38, '"'), 37), ((38, '\''), 37), ((38, '\\'), 37), ((38, 'n'), 37), ((38, 't'), 37), 
        , ((39, '0'), 21), ((39, '1'), 21), ((39, '2'), 21), ((39, '3'), 21), ((39, '4'), 21), ((39, '5'), 21), ((39, '6'), 21), ((39, '7'), 21), ((39, '8'), 21), ((39, '9'), 21), ((39, 'A'), 21), ((39, 'B'), 21), ((39, 'C'), 21), ((39, 'D'), 21), ((39, 'E'), 21), ((39, 'F'), 21), ((39, 'G'), 21), ((39, 'H'), 21), ((39, 'I'), 21), ((39, 'J'), 21), ((39, 'K'), 21), ((39, 'L'), 21), ((39, 'M'), 21), ((39, 'N'), 21), ((39, 'O'), 21), ((39, 'P'), 21), ((39, 'Q'), 21), ((39, 'R'), 21), ((39, 'S'), 21), ((39, 'T'), 21), ((39, 'U'), 21), ((39, 'V'), 21), ((39, 'W'), 21), ((39, 'X'), 21), ((39, 'Y'), 21), ((39, 'Z'), 21), ((39, '_'), 21), ((39, 'a'), 21), ((39, 'b'), 21), ((39, 'c'), 21), ((39, 'd'), 53), ((39, 'e'), 21), ((39, 'f'), 21), ((39, 'g'), 21), ((39, 'h'), 21), ((39, 'i'), 21), ((39, 'j'), 21), ((39, 'k'), 21), ((39, 'l'), 21), ((39, 'm'), 21), ((39, 'n'), 21), ((39, 'o'), 21), ((39, 'p'), 21), ((39, 'q'), 21), ((39, 'r'), 21), ((39, 's'), 21), ((39, 't'), 21), ((39, 'u'), 21), ((39, 'v'), 21), ((39, 'w'), 21), ((39, 'x'), 21), ((39, 'y'), 21), ((39, 'z'), 21), 
        , ((40, '0'), 21), ((40, '1'), 21), ((40, '2'), 21), ((40, '3'), 21), ((40, '4'), 21), ((40, '5'), 21), ((40, '6'), 21), ((40, '7'), 21), ((40, '8'), 21), ((40, '9'), 21), ((40, 'A'), 21), ((40, 'B'), 21), ((40, 'C'), 21), ((40, 'D'), 21), ((40, 'E'), 21), ((40, 'F'), 21), ((40, 'G'), 21), ((40, 'H'), 21), ((40, 'I'), 21), ((40, 'J'), 21), ((40, 'K'), 21), ((40, 'L'), 21), ((40, 'M'), 21), ((40, 'N'), 21), ((40, 'O'), 21), ((40, 'P'), 21), ((40, 'Q'), 21), ((40, 'R'), 21), ((40, 'S'), 21), ((40, 'T'), 21), ((40, 'U'), 21), ((40, 'V'), 21), ((40, 'W'), 21), ((40, 'X'), 21), ((40, 'Y'), 21), ((40, 'Z'), 21), ((40, '_'), 21), ((40, 'a'), 21), ((40, 'b'), 21), ((40, 'c'), 21), ((40, 'd'), 21), ((40, 'e'), 54), ((40, 'f'), 21), ((40, 'g'), 21), ((40, 'h'), 21), ((40, 'i'), 21), ((40, 'j'), 21), ((40, 'k'), 21), ((40, 'l'), 21), ((40, 'm'), 21), ((40, 'n'), 21), ((40, 'o'), 21), ((40, 'p'), 21), ((40, 'q'), 21), ((40, 'r'), 21), ((40, 's'), 21), ((40, 't'), 21), ((40, 'u'), 21), ((40, 'v'), 21), ((40, 'w'), 21), ((40, 'x'), 21), ((40, 'y'), 21), ((40, 'z'), 21), 
        , ((53, '0'), 21), ((53, '1'), 21), ((53, '2'), 21), ((53, '3'), 21), ((53, '4'), 21), ((53, '5'), 21), ((53, '6'), 21), ((53, '7'), 21), ((53, '8'), 21), ((53, '9'), 21), ((53, 'A'), 21), ((53, 'B'), 21), ((53, 'C'), 21), ((53, 'D'), 21), ((53, 'E'), 21), ((53, 'F'), 21), ((53, 'G'), 21), ((53, 'H'), 21), ((53, 'I'), 21), ((53, 'J'), 21), ((53, 'K'), 21), ((53, 'L'), 21), ((53, 'M'), 21), ((53, 'N'), 21), ((53, 'O'), 21), ((53, 'P'), 21), ((53, 'Q'), 21), ((53, 'R'), 21), ((53, 'S'), 21), ((53, 'T'), 21), ((53, 'U'), 21), ((53, 'V'), 21), ((53, 'W'), 21), ((53, 'X'), 21), ((53, 'Y'), 21), ((53, 'Z'), 21), ((53, '_'), 21), ((53, 'a'), 21), ((53, 'b'), 21), ((53, 'c'), 21), ((53, 'd'), 21), ((53, 'e'), 21), ((53, 'f'), 21), ((53, 'g'), 21), ((53, 'h'), 21), ((53, 'i'), 21), ((53, 'j'), 21), ((53, 'k'), 21), ((53, 'l'), 21), ((53, 'm'), 21), ((53, 'n'), 21), ((53, 'o'), 21), ((53, 'p'), 21), ((53, 'q'), 21), ((53, 'r'), 21), ((53, 's'), 21), ((53, 't'), 21), ((53, 'u'), 21), ((53, 'v'), 21), ((53, 'w'), 21), ((53, 'x'), 21), ((53, 'y'), 21), ((53, 'z'), 21), 
        , ((0, '\n'), 1), ((0, ' '), 1), ((0, '!'), 2), ((0, '"'), 3), ((0, '\''), 5), ((0, '('), 6), ((0, ')'), 7), ((0, '*'), 8), ((0, ','), 9), ((0, '-'), 10), ((0, '.'), 11), ((0, ':'), 12), ((0, ';'), 13), ((0, '='), 14), ((0, '?'), 15), ((0, 'A'), 16), ((0, 'B'), 16), ((0, 'C'), 16), ((0, 'D'), 16), ((0, 'E'), 16), ((0, 'F'), 16), ((0, 'G'), 16), ((0, 'H'), 16), ((0, 'I'), 16), ((0, 'J'), 16), ((0, 'K'), 16), ((0, 'L'), 16), ((0, 'M'), 16), ((0, 'N'), 16), ((0, 'O'), 16), ((0, 'P'), 16), ((0, 'Q'), 16), ((0, 'R'), 16), ((0, 'S'), 16), ((0, 'T'), 16), ((0, 'U'), 16), ((0, 'V'), 16), ((0, 'W'), 16), ((0, 'X'), 16), ((0, 'Y'), 16), ((0, 'Z'), 16), ((0, '['), 17), ((0, '\\'), 18), ((0, ']'), 19), ((0, '_'), 20), ((0, 'a'), 21), ((0, 'b'), 21), ((0, 'c'), 21), ((0, 'd'), 21), ((0, 'e'), 21), ((0, 'f'), 21), ((0, 'g'), 21), ((0, 'h'), 21), ((0, 'i'), 21), ((0, 'j'), 21), ((0, 'k'), 22), ((0, 'l'), 21), ((0, 'm'), 21), ((0, 'n'), 21), ((0, 'o'), 21), ((0, 'p'), 21), ((0, 'q'), 21), ((0, 'r'), 21), ((0, 's'), 21), ((0, 't'), 23), ((0, 'u'), 21), ((0, 'v'), 21), ((0, 'w'), 21), ((0, 'x'), 21), ((0, 'y'), 21), ((0, 'z'), 21), 
        ]
        , getMarkedQsOfDFA = XMap.fromAscList []
        }
    runDFA :: DFA -> (ch -> Char) -> [ch] -> ((Maybe Int, [ch]), [ch])
    runDFA (DFA q0 qfs deltas markeds) toChar = XIdentity.runIdentity . go where
        loop1 q buffer [] = return buffer
        loop1 q buffer (ch : str) = do
            case XMap.lookup (q, toChar ch) deltas of
                Nothing -> return (buffer ++ [ch] ++ str)
                Just p -> case XMap.lookup p qfs of
                    Nothing -> loop1 p (buffer ++ [ch]) str
                    latest' -> do
                        (latest, accepted) <- XState.get
                        XState.put (latest', accepted ++ buffer ++ [ch])
                        loop1 p [] str
        loop2 qs q [] buffer = return buffer
        loop2 qs q (ch : str) buffer = do
            case XMap.lookup (q, toChar ch) deltas of
                Nothing -> return (buffer ++ [ch] ++ str)
                Just p -> case p `XSet.member` qs of
                    False -> loop2 qs p str (buffer ++ [ch])
                    True -> do
                        accepted <- XState.get
                        XState.put (accepted ++ buffer ++ [ch])
                        loop2 qs p str []
        go input = do
            (rest, (latest, accepted)) <- XState.runStateT (loop1 q0 [] input) (Nothing, [])
            case latest >>= flip XMap.lookup markeds of
                Nothing -> return ((latest, accepted), rest)
                Just qs -> do
                    (rest', accepted') <- XState.runStateT (loop2 qs q0 accepted []) []
                    return ((latest, accepted'), rest' ++ rest)
    addLoc :: Int -> Int -> String -> [((Int, Int), Char)]
    addLoc _ _ [] = []
    addLoc row col (ch : chs) = if ch == '\n' then ((row, col), ch) : addLoc (row + 1) 1 chs else ((row, col), ch) : addLoc row (col + 1) chs
    doLexing :: [((Int, Int), Char)] -> Either (Int, Int) [AladinToken]
    doLexing [] = return []
    doLexing str0 = do
        (str1, piece) <- case runDFA theDFA snd str0 of
            ((_, []), _) -> Left (fst (head str0))
            ((Just label, accepted), rest) -> return (rest, ((label, map snd accepted), (fst (head accepted), fst (head (reverse accepted)))))
            _ -> Left (fst (head str0))
        maybe_token <- case piece of
            ((1, this), ((row1, col1), (row2, col2))) -> return $ Just $
                ATQuest (SLoc (row1, col1) (row2, col2))

            ((2, this), ((row1, col1), (row2, col2))) -> return $ Just $
                ATSemicolon (SLoc (row1, col1) (row2, col2))

            ((3, this), ((row1, col1), (row2, col2))) -> return $ Just $
                ATKind (SLoc (row1, col1) (row2, col2))

            ((4, this), ((row1, col1), (row2, col2))) -> return $ Just $
                ATType (SLoc (row1, col1) (row2, col2))

            ((5, this), ((row1, col1), (row2, col2))) -> return $ Just $
                ATArrow (SLoc (row1, col1) (row2, col2))

            ((6, this), ((row1, col1), (row2, col2))) -> return $ Just $
                ATStar (SLoc (row1, col1) (row2, col2))

            ((7, this), ((row1, col1), (row2, col2))) -> return $ Just $
                ATLParen (SLoc (row1, col1) (row2, col2))

            ((8, this), ((row1, col1), (row2, col2))) -> return $ Just $
                ATRParen (SLoc (row1, col1) (row2, col2))

            ((9, this), ((row1, col1), (row2, col2))) -> return $ Just $
                ATIf (SLoc (row1, col1) (row2, col2))

            ((10, this), ((row1, col1), (row2, col2))) -> return $ Just $
                ATBSlash (SLoc (row1, col1) (row2, col2))

            ((11, this), ((row1, col1), (row2, col2))) -> return $ Just $
                ATOr (SLoc (row1, col1) (row2, col2))

            ((12, this), ((row1, col1), (row2, col2))) -> return $ Just $
                ATImply (SLoc (row1, col1) (row2, col2))

            ((13, this), ((row1, col1), (row2, col2))) -> return $ Just $
                ATAnd (SLoc (row1, col1) (row2, col2))

            ((14, this), ((row1, col1), (row2, col2))) -> return $ Just $
                ATCut (SLoc (row1, col1) (row2, col2))

            ((15, this), ((row1, col1), (row2, col2))) -> return $ Just $
                ATLBracket (SLoc (row1, col1) (row2, col2))

            ((16, this), ((row1, col1), (row2, col2))) -> return $ Just $
                ATRBracket (SLoc (row1, col1) (row2, col2))

            ((17, this), ((row1, col1), (row2, col2))) -> return $ Just $
                ATCons (SLoc (row1, col1) (row2, col2))

            ((18, this), ((row1, col1), (row2, col2))) -> return $ Just $
                ATSmallId (SLoc (row1, col1) (row2, col2)) this

            ((19, this), ((row1, col1), (row2, col2))) -> return $ Just $
                ATLargeId (SLoc (row1, col1) (row2, col2)) this

            ((20, this), ((row1, col1), (row2, col2))) -> return $ Just $
                ATLiteral (SLoc (row1, col1) (row2, col2)) (StrLit (read this))

            ((21, this), ((row1, col1), (row2, col2))) -> return $ Just $
                ATLiteral (SLoc (row1, col1) (row2, col2)) (ChrLit (read this))

            ((22, this), ((row1, col1), (row2, col2))) -> return Nothing
            ((23, this), ((row1, col1), (row2, col2))) -> return Nothing
        fmap (maybe id (:) maybe_token) (doLexing str1)

