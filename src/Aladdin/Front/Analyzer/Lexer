\hshead {
    module Aladdin.Front.Analyzer.Lexer where
    import Aladdin.Front.Analyzer.Grammar
    import Aladdin.Front.Header
}

\target {
    token-type: "AladinToken"
    lexer-name: "runTokenizer"
}

\define $small_letter = 'a'-'z'
\define $big_letter = 'A'-'Z'
\define $digit = '0'-'9'
\define $Char = [. \ '\n' \ '\\' \ '\"'] + "\\n" + "\\\\" + "\\\"" + "\\\'" + "\\t"
\define $SmallId = [$small_letter] [$small_letter $digit '_' $big_letter]*
\define $LargeId = [$big_letter] [$small_letter $digit '_' $big_letter]* + "_"

\xmatch "?-":
    ATQuest (SLoc (row1, col1) (row2, col2))
\xmatch ".":
    ATSemicolon (SLoc (row1, col1) (row2, col2))
\xmatch "kind":
    ATKind (SLoc (row1, col1) (row2, col2))
\xmatch "type":
    ATType (SLoc (row1, col1) (row2, col2))
\xmatch "->":
    ATArrow (SLoc (row1, col1) (row2, col2))
\xmatch "*":
    ATStar (SLoc (row1, col1) (row2, col2))
\xmatch "(":
    ATLParen (SLoc (row1, col1) (row2, col2))
\xmatch ")":
    ATRParen (SLoc (row1, col1) (row2, col2))
\xmatch ":-":
    ATIf (SLoc (row1, col1) (row2, col2))
\xmatch "\\":
    ATBSlash (SLoc (row1, col1) (row2, col2))
\xmatch ";":
    ATOr (SLoc (row1, col1) (row2, col2))
\xmatch "=>":
    ATImply (SLoc (row1, col1) (row2, col2))
\xmatch ",":
    ATAnd (SLoc (row1, col1) (row2, col2))
\xmatch "!":
    ATCut (SLoc (row1, col1) (row2, col2))
\xmatch "[":
    ATLBracket (SLoc (row1, col1) (row2, col2))
\xmatch "]":
    ATRBracket (SLoc (row1, col1) (row2, col2))
\xmatch "::":
    ATCons (SLoc (row1, col1) (row2, col2))
\xmatch $SmallId:
    ATSmallId (SLoc (row1, col1) (row2, col2)) this
\xmatch $LargeId:
    ATLargeId (SLoc (row1, col1) (row2, col2)) this
\xmatch "\"" $Char* "\"":
    ATLiteral (SLoc (row1, col1) (row2, col2)) (StrLit (read this))
\xmatch "\'" $Char "\'":
    ATLiteral (SLoc (row1, col1) (row2, col2)) (ChrLit (read this))
\xmatch "--" [. \ '\n']*: skip
\xmatch [' ' '\n']+: skip

\hstail {
}
