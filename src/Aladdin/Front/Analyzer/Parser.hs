module Aladdin.Front.Analyzer.Parser where

import Aladdin.Front.Analyzer.Grammar
import Aladdin.Front.Header
import qualified Control.Monad.Trans.Class as Y
import qualified Control.Monad.Trans.Except as Y
import qualified Control.Monad.Trans.State.Strict as Y
import qualified Data.Map.Strict as YMap
import qualified Data.Set as YSet

type ParserS = Int

type NSym = Int

type TSym = Int

data Sym
    = NS NSym
    | TS TSym
    deriving (Eq, Ord)

data Action
    = Shift ParserS
    | Reduce (NSym, [Sym])
    | Accept
    deriving (Eq)

data LR1Parser
    = LR1Parser
        { getInitialS :: ParserS
        , getActionTable :: YMap.Map (ParserS, TSym) Action
        , getReduceTable :: YMap.Map (ParserS, NSym) ParserS
        }
    deriving ()

data ParsingTree
    = PTLeaf (Token)
    | PTBranch NSym [ParsingTree]
    deriving ()



runAladdinParser :: [Token] -> Either (Maybe (Token)) (Either TermRep [DeclRep])
runAladdinParser = fmap (getEither getQuery (getSequence getDecl)) . runLR1 theLR1Parser where
    getQuery :: ParsingTree -> (TermRep)
    getQuery (PTBranch _ [PTLeaf (T_quest loc_1), _2@(PTBranch guard2 _), PTLeaf (T_dot loc_3)])
        | [guard2] `elem` [[3]] =
            (getTermRep0 _2)
    getDecl :: ParsingTree -> (DeclRep)
    getDecl (PTBranch _ [PTLeaf (T_kind loc_1), PTLeaf (T_smallid loc_2 contents_2), _3@(PTBranch guard3 _), PTLeaf (T_dot loc_4)])
        | [guard3] `elem` [[13]] =
            RKindDecl ((loc_1) <> (loc_4)) (TC_Named (contents_2)) (getKindRep0 _3)
    getDecl (PTBranch _ [PTLeaf (T_type loc_1), PTLeaf (T_smallid loc_2 contents_2), _3@(PTBranch guard3 _), PTLeaf (T_dot loc_4)])
        | [guard3] `elem` [[15]] =
            RTypeDecl ((loc_1) <> (loc_4)) (DC_Named (contents_2)) (getTypeRep0 _3)
    getDecl (PTBranch _ [_1@(PTBranch guard1 _), PTLeaf (T_dot loc_2)])
        | [guard1] `elem` [[3]] =
            RFactDecl (getSLoc (getTermRep0 _1) <> (loc_2)) (getTermRep0 _1)
    getKindRep0 :: ParsingTree -> (KindRep)
    getKindRep0 (PTBranch _ [_1@(PTBranch guard1 _), PTLeaf (T_arrow loc_2), _3@(PTBranch guard3 _)])
        | [guard1, guard3] `elem` [[14, 13]] =
            RKArr (getSLoc (getKindRep1 _1) <> getSLoc (getKindRep0 _3)) (getKindRep1 _1) (getKindRep0 _3)
    getKindRep0 (PTBranch _ [_1@(PTBranch guard1 _)])
        | [guard1] `elem` [[14]] =
            (getKindRep1 _1)
    getKindRep1 :: ParsingTree -> (KindRep)
    getKindRep1 (PTBranch _ [PTLeaf (T_type loc_1)])
        | otherwise =
            RStar (loc_1)
    getKindRep1 (PTBranch _ [PTLeaf (T_lparen loc_1), _2@(PTBranch guard2 _), PTLeaf (T_rparen loc_3)])
        | [guard2] `elem` [[13]] =
            RKPrn ((loc_1) <> (loc_3)) (getKindRep0 _2)
    getTypeRep0 :: ParsingTree -> (TypeRep)
    getTypeRep0 (PTBranch _ [_1@(PTBranch guard1 _), PTLeaf (T_arrow loc_2), _3@(PTBranch guard3 _)])
        | [guard1, guard3] `elem` [[16, 15]] =
            RTyApp (getSLoc (getTypeRep1 _1) <> getSLoc (getTypeRep0 _3)) (RTyApp (getSLoc (getTypeRep1 _1) <> (loc_2)) (RTyCon (loc_2) TC_Arrow) (getTypeRep1 _1)) (getTypeRep0 _3)
    getTypeRep0 (PTBranch _ [_1@(PTBranch guard1 _)])
        | [guard1] `elem` [[16]] =
            (getTypeRep1 _1)
    getTypeRep1 :: ParsingTree -> (TypeRep)
    getTypeRep1 (PTBranch _ [_1@(PTBranch guard1 _), _2@(PTBranch guard2 _)])
        | [guard1, guard2] `elem` [[16, 17]] =
            RTyApp (getSLoc (getTypeRep1 _1) <> getSLoc (getTypeRep2 _2)) (getTypeRep1 _1) (getTypeRep2 _2)
    getTypeRep1 (PTBranch _ [_1@(PTBranch guard1 _)])
        | [guard1] `elem` [[17]] =
            (getTypeRep2 _1)
    getTypeRep2 :: ParsingTree -> (TypeRep)
    getTypeRep2 (PTBranch _ [PTLeaf (T_largeid loc_1 contents_1)])
        | otherwise =
            RTyVar (loc_1) (contents_1)
    getTypeRep2 (PTBranch _ [PTLeaf (T_smallid loc_1 contents_1)])
        | otherwise =
            RTyCon (loc_1) (TC_Named (contents_1))
    getTypeRep2 (PTBranch _ [PTLeaf (T_lparen loc_1), _2@(PTBranch guard2 _), PTLeaf (T_rparen loc_3)])
        | [guard2] `elem` [[15]] =
            RTyPrn ((loc_1) <> (loc_3)) (getTypeRep0 _2)
    getTermRep0 :: ParsingTree -> (TermRep)
    getTermRep0 (PTBranch _ [PTLeaf (T_largeid loc_1 contents_1), PTLeaf (T_bslash loc_2), _3@(PTBranch guard3 _)])
        | [guard3] `elem` [[3]] =
            RAbs ((loc_1) <> getSLoc (getTermRep0 _3)) (contents_1) (getTermRep0 _3)
    getTermRep0 (PTBranch _ [_1@(PTBranch guard1 _), PTLeaf (T_if loc_2), _3@(PTBranch guard3 _)])
        | [guard1, guard3] `elem` [[4, 3]] =
            RApp (getSLoc (getTermRep1 _1) <> getSLoc (getTermRep0 _3)) (RApp (getSLoc (getTermRep1 _1) <> (loc_2)) (RCon (loc_2) (DC_LO LO_if)) (getTermRep1 _1)) (getTermRep0 _3)
    getTermRep0 (PTBranch _ [_1@(PTBranch guard1 _)])
        | [guard1] `elem` [[4]] =
            (getTermRep1 _1)
    getTermRep1 :: ParsingTree -> (TermRep)
    getTermRep1 (PTBranch _ [_1@(PTBranch guard1 _), PTLeaf (T_semicolon loc_2), _3@(PTBranch guard3 _)])
        | [guard1, guard3] `elem` [[4, 5]] =
            RApp (getSLoc (getTermRep1 _1) <> getSLoc (getTermRep2 _3)) (RApp (getSLoc (getTermRep1 _1) <> (loc_2)) (RCon (loc_2) (DC_LO LO_or)) (getTermRep1 _1)) (getTermRep2 _3)
    getTermRep1 (PTBranch _ [_1@(PTBranch guard1 _)])
        | [guard1] `elem` [[5]] =
            (getTermRep2 _1)
    getTermRep2 :: ParsingTree -> (TermRep)
    getTermRep2 (PTBranch _ [_1@(PTBranch guard1 _), PTLeaf (T_fatarrow loc_2), _3@(PTBranch guard3 _)])
        | [guard1, guard3] `elem` [[6, 5]] =
            RApp (getSLoc (getTermRep3 _1) <> getSLoc (getTermRep2 _3)) (RApp (getSLoc (getTermRep3 _1) <> (loc_2)) (RCon (loc_2) (DC_LO LO_imply)) (getTermRep3 _1)) (getTermRep2 _3)
    getTermRep2 (PTBranch _ [_1@(PTBranch guard1 _)])
        | [guard1] `elem` [[6]] =
            (getTermRep3 _1)
    getTermRep3 :: ParsingTree -> (TermRep)
    getTermRep3 (PTBranch _ [_1@(PTBranch guard1 _), PTLeaf (T_comma loc_2), _3@(PTBranch guard3 _)])
        | [guard1, guard3] `elem` [[6, 7]] =
            RApp (getSLoc (getTermRep3 _1) <> getSLoc (getTermRep4 _3)) (RApp (getSLoc (getTermRep3 _1) <> (loc_2)) (RCon (loc_2) (DC_LO LO_and)) (getTermRep3 _1)) (getTermRep4 _3)
    getTermRep3 (PTBranch _ [_1@(PTBranch guard1 _)])
        | [guard1] `elem` [[7]] =
            (getTermRep4 _1)
    getTermRep4 :: ParsingTree -> (TermRep)
    getTermRep4 (PTBranch _ [_1@(PTBranch guard1 _), PTLeaf (T_cons loc_2), _3@(PTBranch guard3 _)])
        | [guard1, guard3] `elem` [[8, 7]] =
            RApp (getSLoc (getTermRep5 _1) <> getSLoc (getTermRep4 _3)) (RApp (getSLoc (getTermRep5 _1) <> (loc_2)) (RCon (loc_2) DC_Cons) (getTermRep5 _1)) (getTermRep4 _3)
    getTermRep4 (PTBranch _ [_1@(PTBranch guard1 _)])
        | [guard1] `elem` [[8]] =
            (getTermRep5 _1)
    getTermRep5 :: ParsingTree -> (TermRep)
    getTermRep5 (PTBranch _ [PTLeaf (T_pi loc_1), _2@(PTBranch guard2 _)])
        | [guard2] `elem` [[8]] =
            RApp ((loc_1) <> getSLoc (getTermRep5 _2)) (RCon (loc_1) (DC_LO LO_pi)) (getTermRep5 _2)
    getTermRep5 (PTBranch _ [PTLeaf (T_sigma loc_1), _2@(PTBranch guard2 _)])
        | [guard2] `elem` [[8]] =
            RApp ((loc_1) <> getSLoc (getTermRep5 _2)) (RCon (loc_1) (DC_LO LO_sigma)) (getTermRep5 _2)
    getTermRep5 (PTBranch _ [_1@(PTBranch guard1 _), _2@(PTBranch guard2 _)])
        | [guard1, guard2] `elem` [[8, 9]] =
            RApp (getSLoc (getTermRep5 _1) <> getSLoc (getTermRep6 _2)) (getTermRep5 _1) (getTermRep6 _2)
    getTermRep5 (PTBranch _ [_1@(PTBranch guard1 _)])
        | [guard1] `elem` [[9]] =
            (getTermRep6 _1)
    getTermRep6 :: ParsingTree -> (TermRep)
    getTermRep6 (PTBranch _ [PTLeaf (T_lparen loc_1), _2@(PTBranch guard2 _), PTLeaf (T_rparen loc_3)])
        | [guard2] `elem` [[3]] =
            RPrn ((loc_1) <> (loc_3)) (getTermRep0 _2)
    getTermRep6 (PTBranch _ [PTLeaf (T_cut loc_1)])
        | otherwise =
            RCon (loc_1) (DC_LO LO_cut)
    getTermRep6 (PTBranch _ [PTLeaf (T_true loc_1)])
        | otherwise =
            RCon (loc_1) (DC_LO LO_true)
    getTermRep6 (PTBranch _ [PTLeaf (T_fail loc_1)])
        | otherwise =
            RCon (loc_1) (DC_LO LO_fail)
    getTermRep6 (PTBranch _ [PTLeaf (T_smallid loc_1 contents_1)])
        | otherwise =
            RCon (loc_1) (DC_Named (contents_1))
    getTermRep6 (PTBranch _ [PTLeaf (T_largeid loc_1 contents_1)])
        | otherwise =
            RVar (loc_1) (contents_1)
    getTermRep6 (PTBranch _ [PTLeaf (T_nat_lit loc_1 contents_1)])
        | otherwise =
            mkNatLit (loc_1) (contents_1)
    getTermRep6 (PTBranch _ [PTLeaf (T_str_lit loc_1 contents_1)])
        | otherwise =
            mkStrLit (loc_1) (contents_1)
    getTermRep6 (PTBranch _ [PTLeaf (T_chr_lit loc_1 contents_1)])
        | otherwise =
            mkChrLit (loc_1) (contents_1)
    getTermRep6 (PTBranch _ [PTLeaf (T_lbracket loc_1), PTLeaf (T_rbracket loc_2)])
        | otherwise =
            RCon ((loc_1) <> (loc_2)) DC_Nil
    getTermRep6 (PTBranch _ [PTLeaf (T_lbracket loc_1), _2@(PTBranch guard2 _), PTLeaf (T_rbracket loc_3)])
        | [guard2] `elem` [[10]] =
            RPrn ((loc_1) <> (loc_3)) (getListBody _2)
    getSequence :: (ParsingTree -> (a)) -> ParsingTree -> ([a])
    getSequence getElem (PTBranch _ [])
        | otherwise =
            []
    getSequence getElem (PTBranch _ [_1@(PTBranch guard1 _), _2@(PTBranch guard2 _)])
        | [guard1, guard2] `elem` [[12, 11]] =
            (getElem _1) : (getSequence getElem _2)
    getEither :: (ParsingTree -> (a)) -> (ParsingTree -> (b)) -> ParsingTree -> (Either a b)
    getEither getLeft getRight (PTBranch _ [_1@(PTBranch guard1 _)])
        | [guard1] `elem` [[2]] =
            Left (getLeft _1)
    getEither getLeft getRight (PTBranch _ [_1@(PTBranch guard1 _)])
        | [guard1] `elem` [[11]] =
            Right (getRight _1)
    getListBody :: ParsingTree -> (TermRep)
    getListBody (PTBranch _ [_1@(PTBranch guard1 _)])
        | [guard1] `elem` [[8]] =
            RApp (getSLoc (getTermRep5 _1)) (RApp (getSLoc (getTermRep5 _1)) (RCon (getSLoc (getTermRep5 _1)) DC_Cons) (getTermRep5 _1)) (RCon (getSLoc (getTermRep5 _1)) DC_Nil)
    getListBody (PTBranch _ [_1@(PTBranch guard1 _), PTLeaf (T_comma loc_2), _3@(PTBranch guard3 _)])
        | [guard1, guard3] `elem` [[8, 10]] =
            RApp (getSLoc (getTermRep5 _1) <> getSLoc (getListBody _3)) (RApp (getSLoc (getTermRep5 _1) <> (loc_2)) (RCon (loc_2) DC_Cons) (getTermRep5 _1)) (getListBody _3)
    toTerminal :: (Token) -> TSym
    toTerminal (T_dot loc) = 1
    toTerminal (T_arrow loc) = 2
    toTerminal (T_lparen loc) = 3
    toTerminal (T_rparen loc) = 4
    toTerminal (T_lbracket loc) = 5
    toTerminal (T_rbracket loc) = 6
    toTerminal (T_quest loc) = 7
    toTerminal (T_if loc) = 8
    toTerminal (T_comma loc) = 9
    toTerminal (T_semicolon loc) = 10
    toTerminal (T_fatarrow loc) = 11
    toTerminal (T_pi loc) = 12
    toTerminal (T_sigma loc) = 13
    toTerminal (T_succ loc) = 14
    toTerminal (T_cut loc) = 15
    toTerminal (T_true loc) = 16
    toTerminal (T_fail loc) = 17
    toTerminal (T_bslash loc) = 18
    toTerminal (T_cons loc) = 19
    toTerminal (T_kind loc) = 20
    toTerminal (T_type loc) = 21
    toTerminal (T_smallid loc contents) = 22
    toTerminal (T_largeid loc contents) = 23
    toTerminal (T_nat_lit loc contents) = 24
    toTerminal (T_chr_lit loc contents) = 25
    toTerminal (T_str_lit loc contents) = 26
    toTerminal _ = -1
    runLR1 :: LR1Parser -> [Token] -> Either (Maybe (Token)) ParsingTree
    runLR1 (LR1Parser getInitS getActionT getReduceT) = go where
        loop inputs = do
            let cur = if null inputs then 0 else toTerminal (head inputs)
                exception = Y.lift (if null inputs then Left Nothing else Left (Just (head inputs)))
            (stack, trees) <- Y.get
            case YMap.lookup (head stack, cur) getActionT of
                Nothing -> exception
                Just Accept -> return ()
                Just (Shift top') -> do
                    Y.put (top' : stack, PTLeaf (head inputs) : trees)
                    loop (tail inputs)
                Just (Reduce (lhs, rhs)) -> do
                    let n = length rhs
                    case YMap.lookup (stack !! n, lhs) getReduceT of
                        Nothing -> exception
                        Just top' -> do
                            Y.put (top' : drop n stack, PTBranch lhs (reverse (take n trees)) : drop n trees)
                            loop inputs
        go tokens = do
            (_, (_, result)) <- Y.runStateT (loop tokens) ([getInitS], [])
            case result of
                [output] -> return output
    theLR1Parser :: LR1Parser
    theLR1Parser = LR1Parser
        { getInitialS = 0
        , getActionTable = YMap.fromList 
            [ ((0,0),Reduce (11,[]))
            , ((0,25),Shift 12)
            , ((0,15),Shift 13)
            , ((0,17),Shift 14)
            , ((0,20),Shift 15)
            , ((0,23),Shift 16)
            , ((0,5),Shift 17)
            , ((0,3),Shift 18)
            , ((0,24),Shift 19)
            , ((0,12),Shift 20)
            , ((0,7),Shift 21)
            , ((0,13),Shift 22)
            , ((0,22),Shift 23)
            , ((0,26),Shift 24)
            , ((0,16),Shift 25)
            , ((0,21),Shift 26)
            , ((1,0),Reduce (11,[]))
            , ((1,25),Shift 12)
            , ((1,15),Shift 13)
            , ((1,17),Shift 14)
            , ((1,20),Shift 15)
            , ((1,23),Shift 16)
            , ((1,5),Shift 17)
            , ((1,3),Shift 18)
            , ((1,24),Shift 19)
            , ((1,12),Shift 20)
            , ((1,13),Shift 22)
            , ((1,22),Shift 23)
            , ((1,26),Shift 24)
            , ((1,16),Shift 25)
            , ((1,21),Shift 26)
            , ((2,0),Reduce (1,[NS 2]))
            , ((3,1),Shift 28)
            , ((4,1),Reduce (3,[NS 4]))
            , ((4,8),Shift 37)
            , ((4,4),Reduce (3,[NS 4]))
            , ((4,10),Shift 38)
            , ((5,1),Reduce (4,[NS 5]))
            , ((5,8),Reduce (4,[NS 5]))
            , ((5,4),Reduce (4,[NS 5]))
            , ((5,10),Reduce (4,[NS 5]))
            , ((6,9),Shift 40)
            , ((6,1),Reduce (5,[NS 6]))
            , ((6,11),Shift 41)
            , ((6,8),Reduce (5,[NS 6]))
            , ((6,4),Reduce (5,[NS 6]))
            , ((6,10),Reduce (5,[NS 6]))
            , ((7,9),Reduce (6,[NS 7]))
            , ((7,1),Reduce (6,[NS 7]))
            , ((7,11),Reduce (6,[NS 7]))
            , ((7,8),Reduce (6,[NS 7]))
            , ((7,4),Reduce (6,[NS 7]))
            , ((7,10),Reduce (6,[NS 7]))
            , ((8,25),Shift 12)
            , ((8,9),Reduce (7,[NS 8]))
            , ((8,19),Shift 43)
            , ((8,15),Shift 13)
            , ((8,1),Reduce (7,[NS 8]))
            , ((8,17),Shift 14)
            , ((8,11),Reduce (7,[NS 8]))
            , ((8,8),Reduce (7,[NS 8]))
            , ((8,23),Shift 33)
            , ((8,5),Shift 17)
            , ((8,3),Shift 18)
            , ((8,24),Shift 19)
            , ((8,4),Reduce (7,[NS 8]))
            , ((8,10),Reduce (7,[NS 8]))
            , ((8,22),Shift 23)
            , ((8,26),Shift 24)
            , ((8,16),Shift 25)
            , ((9,25),Reduce (8,[NS 9]))
            , ((9,9),Reduce (8,[NS 9]))
            , ((9,19),Reduce (8,[NS 9]))
            , ((9,15),Reduce (8,[NS 9]))
            , ((9,1),Reduce (8,[NS 9]))
            , ((9,17),Reduce (8,[NS 9]))
            , ((9,11),Reduce (8,[NS 9]))
            , ((9,8),Reduce (8,[NS 9]))
            , ((9,23),Reduce (8,[NS 9]))
            , ((9,5),Reduce (8,[NS 9]))
            , ((9,3),Reduce (8,[NS 9]))
            , ((9,24),Reduce (8,[NS 9]))
            , ((9,6),Reduce (8,[NS 9]))
            , ((9,4),Reduce (8,[NS 9]))
            , ((9,10),Reduce (8,[NS 9]))
            , ((9,22),Reduce (8,[NS 9]))
            , ((9,26),Reduce (8,[NS 9]))
            , ((9,16),Reduce (8,[NS 9]))
            , ((10,0),Reduce (1,[NS 11]))
            , ((11,0),Accept)
            , ((12,25),Reduce (9,[TS 25]))
            , ((12,9),Reduce (9,[TS 25]))
            , ((12,19),Reduce (9,[TS 25]))
            , ((12,15),Reduce (9,[TS 25]))
            , ((12,1),Reduce (9,[TS 25]))
            , ((12,17),Reduce (9,[TS 25]))
            , ((12,11),Reduce (9,[TS 25]))
            , ((12,8),Reduce (9,[TS 25]))
            , ((12,23),Reduce (9,[TS 25]))
            , ((12,5),Reduce (9,[TS 25]))
            , ((12,3),Reduce (9,[TS 25]))
            , ((12,24),Reduce (9,[TS 25]))
            , ((12,6),Reduce (9,[TS 25]))
            , ((12,4),Reduce (9,[TS 25]))
            , ((12,10),Reduce (9,[TS 25]))
            , ((12,22),Reduce (9,[TS 25]))
            , ((12,26),Reduce (9,[TS 25]))
            , ((12,16),Reduce (9,[TS 25]))
            , ((13,25),Reduce (9,[TS 15]))
            , ((13,9),Reduce (9,[TS 15]))
            , ((13,19),Reduce (9,[TS 15]))
            , ((13,15),Reduce (9,[TS 15]))
            , ((13,1),Reduce (9,[TS 15]))
            , ((13,17),Reduce (9,[TS 15]))
            , ((13,11),Reduce (9,[TS 15]))
            , ((13,8),Reduce (9,[TS 15]))
            , ((13,23),Reduce (9,[TS 15]))
            , ((13,5),Reduce (9,[TS 15]))
            , ((13,3),Reduce (9,[TS 15]))
            , ((13,24),Reduce (9,[TS 15]))
            , ((13,6),Reduce (9,[TS 15]))
            , ((13,4),Reduce (9,[TS 15]))
            , ((13,10),Reduce (9,[TS 15]))
            , ((13,22),Reduce (9,[TS 15]))
            , ((13,26),Reduce (9,[TS 15]))
            , ((13,16),Reduce (9,[TS 15]))
            , ((14,25),Reduce (9,[TS 17]))
            , ((14,9),Reduce (9,[TS 17]))
            , ((14,19),Reduce (9,[TS 17]))
            , ((14,15),Reduce (9,[TS 17]))
            , ((14,1),Reduce (9,[TS 17]))
            , ((14,17),Reduce (9,[TS 17]))
            , ((14,11),Reduce (9,[TS 17]))
            , ((14,8),Reduce (9,[TS 17]))
            , ((14,23),Reduce (9,[TS 17]))
            , ((14,5),Reduce (9,[TS 17]))
            , ((14,3),Reduce (9,[TS 17]))
            , ((14,24),Reduce (9,[TS 17]))
            , ((14,6),Reduce (9,[TS 17]))
            , ((14,4),Reduce (9,[TS 17]))
            , ((14,10),Reduce (9,[TS 17]))
            , ((14,22),Reduce (9,[TS 17]))
            , ((14,26),Reduce (9,[TS 17]))
            , ((14,16),Reduce (9,[TS 17]))
            , ((15,22),Shift 29)
            , ((16,18),Shift 39)
            , ((16,25),Reduce (9,[TS 23]))
            , ((16,9),Reduce (9,[TS 23]))
            , ((16,19),Reduce (9,[TS 23]))
            , ((16,15),Reduce (9,[TS 23]))
            , ((16,1),Reduce (9,[TS 23]))
            , ((16,17),Reduce (9,[TS 23]))
            , ((16,11),Reduce (9,[TS 23]))
            , ((16,8),Reduce (9,[TS 23]))
            , ((16,23),Reduce (9,[TS 23]))
            , ((16,5),Reduce (9,[TS 23]))
            , ((16,3),Reduce (9,[TS 23]))
            , ((16,24),Reduce (9,[TS 23]))
            , ((16,4),Reduce (9,[TS 23]))
            , ((16,10),Reduce (9,[TS 23]))
            , ((16,22),Reduce (9,[TS 23]))
            , ((16,26),Reduce (9,[TS 23]))
            , ((16,16),Reduce (9,[TS 23]))
            , ((17,25),Shift 12)
            , ((17,15),Shift 13)
            , ((17,17),Shift 14)
            , ((17,23),Shift 33)
            , ((17,5),Shift 17)
            , ((17,3),Shift 18)
            , ((17,24),Shift 19)
            , ((17,12),Shift 20)
            , ((17,6),Shift 34)
            , ((17,13),Shift 22)
            , ((17,22),Shift 23)
            , ((17,26),Shift 24)
            , ((17,16),Shift 25)
            , ((18,25),Shift 12)
            , ((18,15),Shift 13)
            , ((18,17),Shift 14)
            , ((18,23),Shift 16)
            , ((18,5),Shift 17)
            , ((18,3),Shift 18)
            , ((18,24),Shift 19)
            , ((18,12),Shift 20)
            , ((18,13),Shift 22)
            , ((18,22),Shift 23)
            , ((18,26),Shift 24)
            , ((18,16),Shift 25)
            , ((19,25),Reduce (9,[TS 24]))
            , ((19,9),Reduce (9,[TS 24]))
            , ((19,19),Reduce (9,[TS 24]))
            , ((19,15),Reduce (9,[TS 24]))
            , ((19,1),Reduce (9,[TS 24]))
            , ((19,17),Reduce (9,[TS 24]))
            , ((19,11),Reduce (9,[TS 24]))
            , ((19,8),Reduce (9,[TS 24]))
            , ((19,23),Reduce (9,[TS 24]))
            , ((19,5),Reduce (9,[TS 24]))
            , ((19,3),Reduce (9,[TS 24]))
            , ((19,24),Reduce (9,[TS 24]))
            , ((19,6),Reduce (9,[TS 24]))
            , ((19,4),Reduce (9,[TS 24]))
            , ((19,10),Reduce (9,[TS 24]))
            , ((19,22),Reduce (9,[TS 24]))
            , ((19,26),Reduce (9,[TS 24]))
            , ((19,16),Reduce (9,[TS 24]))
            , ((20,25),Shift 12)
            , ((20,15),Shift 13)
            , ((20,17),Shift 14)
            , ((20,23),Shift 33)
            , ((20,5),Shift 17)
            , ((20,3),Shift 18)
            , ((20,24),Shift 19)
            , ((20,12),Shift 20)
            , ((20,13),Shift 22)
            , ((20,22),Shift 23)
            , ((20,26),Shift 24)
            , ((20,16),Shift 25)
            , ((21,25),Shift 12)
            , ((21,15),Shift 13)
            , ((21,17),Shift 14)
            , ((21,23),Shift 16)
            , ((21,5),Shift 17)
            , ((21,3),Shift 18)
            , ((21,24),Shift 19)
            , ((21,12),Shift 20)
            , ((21,13),Shift 22)
            , ((21,22),Shift 23)
            , ((21,26),Shift 24)
            , ((21,16),Shift 25)
            , ((22,25),Shift 12)
            , ((22,15),Shift 13)
            , ((22,17),Shift 14)
            , ((22,23),Shift 33)
            , ((22,5),Shift 17)
            , ((22,3),Shift 18)
            , ((22,24),Shift 19)
            , ((22,12),Shift 20)
            , ((22,13),Shift 22)
            , ((22,22),Shift 23)
            , ((22,26),Shift 24)
            , ((22,16),Shift 25)
            , ((23,25),Reduce (9,[TS 22]))
            , ((23,9),Reduce (9,[TS 22]))
            , ((23,19),Reduce (9,[TS 22]))
            , ((23,15),Reduce (9,[TS 22]))
            , ((23,1),Reduce (9,[TS 22]))
            , ((23,17),Reduce (9,[TS 22]))
            , ((23,11),Reduce (9,[TS 22]))
            , ((23,8),Reduce (9,[TS 22]))
            , ((23,23),Reduce (9,[TS 22]))
            , ((23,5),Reduce (9,[TS 22]))
            , ((23,3),Reduce (9,[TS 22]))
            , ((23,24),Reduce (9,[TS 22]))
            , ((23,6),Reduce (9,[TS 22]))
            , ((23,4),Reduce (9,[TS 22]))
            , ((23,10),Reduce (9,[TS 22]))
            , ((23,22),Reduce (9,[TS 22]))
            , ((23,26),Reduce (9,[TS 22]))
            , ((23,16),Reduce (9,[TS 22]))
            , ((24,25),Reduce (9,[TS 26]))
            , ((24,9),Reduce (9,[TS 26]))
            , ((24,19),Reduce (9,[TS 26]))
            , ((24,15),Reduce (9,[TS 26]))
            , ((24,1),Reduce (9,[TS 26]))
            , ((24,17),Reduce (9,[TS 26]))
            , ((24,11),Reduce (9,[TS 26]))
            , ((24,8),Reduce (9,[TS 26]))
            , ((24,23),Reduce (9,[TS 26]))
            , ((24,5),Reduce (9,[TS 26]))
            , ((24,3),Reduce (9,[TS 26]))
            , ((24,24),Reduce (9,[TS 26]))
            , ((24,6),Reduce (9,[TS 26]))
            , ((24,4),Reduce (9,[TS 26]))
            , ((24,10),Reduce (9,[TS 26]))
            , ((24,22),Reduce (9,[TS 26]))
            , ((24,26),Reduce (9,[TS 26]))
            , ((24,16),Reduce (9,[TS 26]))
            , ((25,25),Reduce (9,[TS 16]))
            , ((25,9),Reduce (9,[TS 16]))
            , ((25,19),Reduce (9,[TS 16]))
            , ((25,15),Reduce (9,[TS 16]))
            , ((25,1),Reduce (9,[TS 16]))
            , ((25,17),Reduce (9,[TS 16]))
            , ((25,11),Reduce (9,[TS 16]))
            , ((25,8),Reduce (9,[TS 16]))
            , ((25,23),Reduce (9,[TS 16]))
            , ((25,5),Reduce (9,[TS 16]))
            , ((25,3),Reduce (9,[TS 16]))
            , ((25,24),Reduce (9,[TS 16]))
            , ((25,6),Reduce (9,[TS 16]))
            , ((25,4),Reduce (9,[TS 16]))
            , ((25,10),Reduce (9,[TS 16]))
            , ((25,22),Reduce (9,[TS 16]))
            , ((25,26),Reduce (9,[TS 16]))
            , ((25,16),Reduce (9,[TS 16]))
            , ((26,22),Shift 30)
            , ((27,0),Reduce (11,[NS 12,NS 11]))
            , ((28,0),Reduce (12,[NS 3,TS 1]))
            , ((28,25),Reduce (12,[NS 3,TS 1]))
            , ((28,15),Reduce (12,[NS 3,TS 1]))
            , ((28,17),Reduce (12,[NS 3,TS 1]))
            , ((28,20),Reduce (12,[NS 3,TS 1]))
            , ((28,23),Reduce (12,[NS 3,TS 1]))
            , ((28,5),Reduce (12,[NS 3,TS 1]))
            , ((28,3),Reduce (12,[NS 3,TS 1]))
            , ((28,24),Reduce (12,[NS 3,TS 1]))
            , ((28,12),Reduce (12,[NS 3,TS 1]))
            , ((28,13),Reduce (12,[NS 3,TS 1]))
            , ((28,22),Reduce (12,[NS 3,TS 1]))
            , ((28,26),Reduce (12,[NS 3,TS 1]))
            , ((28,16),Reduce (12,[NS 3,TS 1]))
            , ((28,21),Reduce (12,[NS 3,TS 1]))
            , ((29,3),Shift 48)
            , ((29,21),Shift 49)
            , ((30,23),Shift 53)
            , ((30,3),Shift 54)
            , ((30,22),Shift 55)
            , ((31,6),Shift 64)
            , ((32,25),Shift 12)
            , ((32,9),Shift 56)
            , ((32,15),Shift 13)
            , ((32,17),Shift 14)
            , ((32,23),Shift 33)
            , ((32,5),Shift 17)
            , ((32,3),Shift 18)
            , ((32,24),Shift 19)
            , ((32,6),Reduce (10,[NS 8]))
            , ((32,22),Shift 23)
            , ((32,26),Shift 24)
            , ((32,16),Shift 25)
            , ((33,25),Reduce (9,[TS 23]))
            , ((33,9),Reduce (9,[TS 23]))
            , ((33,19),Reduce (9,[TS 23]))
            , ((33,15),Reduce (9,[TS 23]))
            , ((33,1),Reduce (9,[TS 23]))
            , ((33,17),Reduce (9,[TS 23]))
            , ((33,11),Reduce (9,[TS 23]))
            , ((33,8),Reduce (9,[TS 23]))
            , ((33,23),Reduce (9,[TS 23]))
            , ((33,5),Reduce (9,[TS 23]))
            , ((33,3),Reduce (9,[TS 23]))
            , ((33,24),Reduce (9,[TS 23]))
            , ((33,6),Reduce (9,[TS 23]))
            , ((33,4),Reduce (9,[TS 23]))
            , ((33,10),Reduce (9,[TS 23]))
            , ((33,22),Reduce (9,[TS 23]))
            , ((33,26),Reduce (9,[TS 23]))
            , ((33,16),Reduce (9,[TS 23]))
            , ((34,25),Reduce (9,[TS 5,TS 6]))
            , ((34,9),Reduce (9,[TS 5,TS 6]))
            , ((34,19),Reduce (9,[TS 5,TS 6]))
            , ((34,15),Reduce (9,[TS 5,TS 6]))
            , ((34,1),Reduce (9,[TS 5,TS 6]))
            , ((34,17),Reduce (9,[TS 5,TS 6]))
            , ((34,11),Reduce (9,[TS 5,TS 6]))
            , ((34,8),Reduce (9,[TS 5,TS 6]))
            , ((34,23),Reduce (9,[TS 5,TS 6]))
            , ((34,5),Reduce (9,[TS 5,TS 6]))
            , ((34,3),Reduce (9,[TS 5,TS 6]))
            , ((34,24),Reduce (9,[TS 5,TS 6]))
            , ((34,6),Reduce (9,[TS 5,TS 6]))
            , ((34,4),Reduce (9,[TS 5,TS 6]))
            , ((34,10),Reduce (9,[TS 5,TS 6]))
            , ((34,22),Reduce (9,[TS 5,TS 6]))
            , ((34,26),Reduce (9,[TS 5,TS 6]))
            , ((34,16),Reduce (9,[TS 5,TS 6]))
            , ((35,1),Shift 57)
            , ((36,4),Shift 65)
            , ((37,25),Shift 12)
            , ((37,15),Shift 13)
            , ((37,17),Shift 14)
            , ((37,23),Shift 16)
            , ((37,5),Shift 17)
            , ((37,3),Shift 18)
            , ((37,24),Shift 19)
            , ((37,12),Shift 20)
            , ((37,13),Shift 22)
            , ((37,22),Shift 23)
            , ((37,26),Shift 24)
            , ((37,16),Shift 25)
            , ((38,25),Shift 12)
            , ((38,15),Shift 13)
            , ((38,17),Shift 14)
            , ((38,23),Shift 33)
            , ((38,5),Shift 17)
            , ((38,3),Shift 18)
            , ((38,24),Shift 19)
            , ((38,12),Shift 20)
            , ((38,13),Shift 22)
            , ((38,22),Shift 23)
            , ((38,26),Shift 24)
            , ((38,16),Shift 25)
            , ((39,25),Shift 12)
            , ((39,15),Shift 13)
            , ((39,17),Shift 14)
            , ((39,23),Shift 16)
            , ((39,5),Shift 17)
            , ((39,3),Shift 18)
            , ((39,24),Shift 19)
            , ((39,12),Shift 20)
            , ((39,13),Shift 22)
            , ((39,22),Shift 23)
            , ((39,26),Shift 24)
            , ((39,16),Shift 25)
            , ((40,25),Shift 12)
            , ((40,15),Shift 13)
            , ((40,17),Shift 14)
            , ((40,23),Shift 33)
            , ((40,5),Shift 17)
            , ((40,3),Shift 18)
            , ((40,24),Shift 19)
            , ((40,12),Shift 20)
            , ((40,13),Shift 22)
            , ((40,22),Shift 23)
            , ((40,26),Shift 24)
            , ((40,16),Shift 25)
            , ((41,25),Shift 12)
            , ((41,15),Shift 13)
            , ((41,17),Shift 14)
            , ((41,23),Shift 33)
            , ((41,5),Shift 17)
            , ((41,3),Shift 18)
            , ((41,24),Shift 19)
            , ((41,12),Shift 20)
            , ((41,13),Shift 22)
            , ((41,22),Shift 23)
            , ((41,26),Shift 24)
            , ((41,16),Shift 25)
            , ((42,25),Reduce (8,[NS 8,NS 9]))
            , ((42,9),Reduce (8,[NS 8,NS 9]))
            , ((42,19),Reduce (8,[NS 8,NS 9]))
            , ((42,15),Reduce (8,[NS 8,NS 9]))
            , ((42,1),Reduce (8,[NS 8,NS 9]))
            , ((42,17),Reduce (8,[NS 8,NS 9]))
            , ((42,11),Reduce (8,[NS 8,NS 9]))
            , ((42,8),Reduce (8,[NS 8,NS 9]))
            , ((42,23),Reduce (8,[NS 8,NS 9]))
            , ((42,5),Reduce (8,[NS 8,NS 9]))
            , ((42,3),Reduce (8,[NS 8,NS 9]))
            , ((42,24),Reduce (8,[NS 8,NS 9]))
            , ((42,6),Reduce (8,[NS 8,NS 9]))
            , ((42,4),Reduce (8,[NS 8,NS 9]))
            , ((42,10),Reduce (8,[NS 8,NS 9]))
            , ((42,22),Reduce (8,[NS 8,NS 9]))
            , ((42,26),Reduce (8,[NS 8,NS 9]))
            , ((42,16),Reduce (8,[NS 8,NS 9]))
            , ((43,25),Shift 12)
            , ((43,15),Shift 13)
            , ((43,17),Shift 14)
            , ((43,23),Shift 33)
            , ((43,5),Shift 17)
            , ((43,3),Shift 18)
            , ((43,24),Shift 19)
            , ((43,12),Shift 20)
            , ((43,13),Shift 22)
            , ((43,22),Shift 23)
            , ((43,26),Shift 24)
            , ((43,16),Shift 25)
            , ((44,25),Reduce (8,[TS 12,NS 8]))
            , ((44,9),Reduce (8,[TS 12,NS 8]))
            , ((44,19),Reduce (8,[TS 12,NS 8]))
            , ((44,15),Reduce (8,[TS 12,NS 8]))
            , ((44,1),Reduce (8,[TS 12,NS 8]))
            , ((44,17),Reduce (8,[TS 12,NS 8]))
            , ((44,11),Reduce (8,[TS 12,NS 8]))
            , ((44,8),Reduce (8,[TS 12,NS 8]))
            , ((44,23),Reduce (8,[TS 12,NS 8]))
            , ((44,5),Reduce (8,[TS 12,NS 8]))
            , ((44,3),Reduce (8,[TS 12,NS 8]))
            , ((44,24),Reduce (8,[TS 12,NS 8]))
            , ((44,6),Reduce (8,[TS 12,NS 8]))
            , ((44,4),Reduce (8,[TS 12,NS 8]))
            , ((44,10),Reduce (8,[TS 12,NS 8]))
            , ((44,22),Reduce (8,[TS 12,NS 8]))
            , ((44,26),Reduce (8,[TS 12,NS 8]))
            , ((44,16),Reduce (8,[TS 12,NS 8]))
            , ((45,25),Reduce (8,[TS 13,NS 8]))
            , ((45,9),Reduce (8,[TS 13,NS 8]))
            , ((45,19),Reduce (8,[TS 13,NS 8]))
            , ((45,15),Reduce (8,[TS 13,NS 8]))
            , ((45,1),Reduce (8,[TS 13,NS 8]))
            , ((45,17),Reduce (8,[TS 13,NS 8]))
            , ((45,11),Reduce (8,[TS 13,NS 8]))
            , ((45,8),Reduce (8,[TS 13,NS 8]))
            , ((45,23),Reduce (8,[TS 13,NS 8]))
            , ((45,5),Reduce (8,[TS 13,NS 8]))
            , ((45,3),Reduce (8,[TS 13,NS 8]))
            , ((45,24),Reduce (8,[TS 13,NS 8]))
            , ((45,6),Reduce (8,[TS 13,NS 8]))
            , ((45,4),Reduce (8,[TS 13,NS 8]))
            , ((45,10),Reduce (8,[TS 13,NS 8]))
            , ((45,22),Reduce (8,[TS 13,NS 8]))
            , ((45,26),Reduce (8,[TS 13,NS 8]))
            , ((45,16),Reduce (8,[TS 13,NS 8]))
            , ((46,1),Shift 66)
            , ((47,2),Shift 69)
            , ((47,1),Reduce (13,[NS 14]))
            , ((47,4),Reduce (13,[NS 14]))
            , ((48,3),Shift 48)
            , ((48,21),Shift 49)
            , ((49,2),Reduce (14,[TS 21]))
            , ((49,1),Reduce (14,[TS 21]))
            , ((49,4),Reduce (14,[TS 21]))
            , ((50,1),Shift 67)
            , ((51,2),Shift 73)
            , ((51,1),Reduce (15,[NS 16]))
            , ((51,23),Shift 53)
            , ((51,3),Shift 54)
            , ((51,4),Reduce (15,[NS 16]))
            , ((51,22),Shift 55)
            , ((52,2),Reduce (16,[NS 17]))
            , ((52,1),Reduce (16,[NS 17]))
            , ((52,23),Reduce (16,[NS 17]))
            , ((52,3),Reduce (16,[NS 17]))
            , ((52,4),Reduce (16,[NS 17]))
            , ((52,22),Reduce (16,[NS 17]))
            , ((53,2),Reduce (17,[TS 23]))
            , ((53,1),Reduce (17,[TS 23]))
            , ((53,23),Reduce (17,[TS 23]))
            , ((53,3),Reduce (17,[TS 23]))
            , ((53,4),Reduce (17,[TS 23]))
            , ((53,22),Reduce (17,[TS 23]))
            , ((54,23),Shift 53)
            , ((54,3),Shift 54)
            , ((54,22),Shift 55)
            , ((55,2),Reduce (17,[TS 22]))
            , ((55,1),Reduce (17,[TS 22]))
            , ((55,23),Reduce (17,[TS 22]))
            , ((55,3),Reduce (17,[TS 22]))
            , ((55,4),Reduce (17,[TS 22]))
            , ((55,22),Reduce (17,[TS 22]))
            , ((56,25),Shift 12)
            , ((56,15),Shift 13)
            , ((56,17),Shift 14)
            , ((56,23),Shift 33)
            , ((56,5),Shift 17)
            , ((56,3),Shift 18)
            , ((56,24),Shift 19)
            , ((56,12),Shift 20)
            , ((56,13),Shift 22)
            , ((56,22),Shift 23)
            , ((56,26),Shift 24)
            , ((56,16),Shift 25)
            , ((57,0),Reduce (2,[TS 7,NS 3,TS 1]))
            , ((58,1),Reduce (3,[NS 4,TS 8,NS 3]))
            , ((58,4),Reduce (3,[NS 4,TS 8,NS 3]))
            , ((59,1),Reduce (3,[TS 23,TS 18,NS 3]))
            , ((59,4),Reduce (3,[TS 23,TS 18,NS 3]))
            , ((60,1),Reduce (4,[NS 4,TS 10,NS 5]))
            , ((60,8),Reduce (4,[NS 4,TS 10,NS 5]))
            , ((60,4),Reduce (4,[NS 4,TS 10,NS 5]))
            , ((60,10),Reduce (4,[NS 4,TS 10,NS 5]))
            , ((61,1),Reduce (5,[NS 6,TS 11,NS 5]))
            , ((61,8),Reduce (5,[NS 6,TS 11,NS 5]))
            , ((61,4),Reduce (5,[NS 6,TS 11,NS 5]))
            , ((61,10),Reduce (5,[NS 6,TS 11,NS 5]))
            , ((62,9),Reduce (6,[NS 6,TS 9,NS 7]))
            , ((62,1),Reduce (6,[NS 6,TS 9,NS 7]))
            , ((62,11),Reduce (6,[NS 6,TS 9,NS 7]))
            , ((62,8),Reduce (6,[NS 6,TS 9,NS 7]))
            , ((62,4),Reduce (6,[NS 6,TS 9,NS 7]))
            , ((62,10),Reduce (6,[NS 6,TS 9,NS 7]))
            , ((63,9),Reduce (7,[NS 8,TS 19,NS 7]))
            , ((63,1),Reduce (7,[NS 8,TS 19,NS 7]))
            , ((63,11),Reduce (7,[NS 8,TS 19,NS 7]))
            , ((63,8),Reduce (7,[NS 8,TS 19,NS 7]))
            , ((63,4),Reduce (7,[NS 8,TS 19,NS 7]))
            , ((63,10),Reduce (7,[NS 8,TS 19,NS 7]))
            , ((64,25),Reduce (9,[TS 5,NS 10,TS 6]))
            , ((64,9),Reduce (9,[TS 5,NS 10,TS 6]))
            , ((64,19),Reduce (9,[TS 5,NS 10,TS 6]))
            , ((64,15),Reduce (9,[TS 5,NS 10,TS 6]))
            , ((64,1),Reduce (9,[TS 5,NS 10,TS 6]))
            , ((64,17),Reduce (9,[TS 5,NS 10,TS 6]))
            , ((64,11),Reduce (9,[TS 5,NS 10,TS 6]))
            , ((64,8),Reduce (9,[TS 5,NS 10,TS 6]))
            , ((64,23),Reduce (9,[TS 5,NS 10,TS 6]))
            , ((64,5),Reduce (9,[TS 5,NS 10,TS 6]))
            , ((64,3),Reduce (9,[TS 5,NS 10,TS 6]))
            , ((64,24),Reduce (9,[TS 5,NS 10,TS 6]))
            , ((64,6),Reduce (9,[TS 5,NS 10,TS 6]))
            , ((64,4),Reduce (9,[TS 5,NS 10,TS 6]))
            , ((64,10),Reduce (9,[TS 5,NS 10,TS 6]))
            , ((64,22),Reduce (9,[TS 5,NS 10,TS 6]))
            , ((64,26),Reduce (9,[TS 5,NS 10,TS 6]))
            , ((64,16),Reduce (9,[TS 5,NS 10,TS 6]))
            , ((65,25),Reduce (9,[TS 3,NS 3,TS 4]))
            , ((65,9),Reduce (9,[TS 3,NS 3,TS 4]))
            , ((65,19),Reduce (9,[TS 3,NS 3,TS 4]))
            , ((65,15),Reduce (9,[TS 3,NS 3,TS 4]))
            , ((65,1),Reduce (9,[TS 3,NS 3,TS 4]))
            , ((65,17),Reduce (9,[TS 3,NS 3,TS 4]))
            , ((65,11),Reduce (9,[TS 3,NS 3,TS 4]))
            , ((65,8),Reduce (9,[TS 3,NS 3,TS 4]))
            , ((65,23),Reduce (9,[TS 3,NS 3,TS 4]))
            , ((65,5),Reduce (9,[TS 3,NS 3,TS 4]))
            , ((65,3),Reduce (9,[TS 3,NS 3,TS 4]))
            , ((65,24),Reduce (9,[TS 3,NS 3,TS 4]))
            , ((65,6),Reduce (9,[TS 3,NS 3,TS 4]))
            , ((65,4),Reduce (9,[TS 3,NS 3,TS 4]))
            , ((65,10),Reduce (9,[TS 3,NS 3,TS 4]))
            , ((65,22),Reduce (9,[TS 3,NS 3,TS 4]))
            , ((65,26),Reduce (9,[TS 3,NS 3,TS 4]))
            , ((65,16),Reduce (9,[TS 3,NS 3,TS 4]))
            , ((66,0),Reduce (12,[TS 20,TS 22,NS 13,TS 1]))
            , ((66,25),Reduce (12,[TS 20,TS 22,NS 13,TS 1]))
            , ((66,15),Reduce (12,[TS 20,TS 22,NS 13,TS 1]))
            , ((66,17),Reduce (12,[TS 20,TS 22,NS 13,TS 1]))
            , ((66,20),Reduce (12,[TS 20,TS 22,NS 13,TS 1]))
            , ((66,23),Reduce (12,[TS 20,TS 22,NS 13,TS 1]))
            , ((66,5),Reduce (12,[TS 20,TS 22,NS 13,TS 1]))
            , ((66,3),Reduce (12,[TS 20,TS 22,NS 13,TS 1]))
            , ((66,24),Reduce (12,[TS 20,TS 22,NS 13,TS 1]))
            , ((66,12),Reduce (12,[TS 20,TS 22,NS 13,TS 1]))
            , ((66,13),Reduce (12,[TS 20,TS 22,NS 13,TS 1]))
            , ((66,22),Reduce (12,[TS 20,TS 22,NS 13,TS 1]))
            , ((66,26),Reduce (12,[TS 20,TS 22,NS 13,TS 1]))
            , ((66,16),Reduce (12,[TS 20,TS 22,NS 13,TS 1]))
            , ((66,21),Reduce (12,[TS 20,TS 22,NS 13,TS 1]))
            , ((67,0),Reduce (12,[TS 21,TS 22,NS 15,TS 1]))
            , ((67,25),Reduce (12,[TS 21,TS 22,NS 15,TS 1]))
            , ((67,15),Reduce (12,[TS 21,TS 22,NS 15,TS 1]))
            , ((67,17),Reduce (12,[TS 21,TS 22,NS 15,TS 1]))
            , ((67,20),Reduce (12,[TS 21,TS 22,NS 15,TS 1]))
            , ((67,23),Reduce (12,[TS 21,TS 22,NS 15,TS 1]))
            , ((67,5),Reduce (12,[TS 21,TS 22,NS 15,TS 1]))
            , ((67,3),Reduce (12,[TS 21,TS 22,NS 15,TS 1]))
            , ((67,24),Reduce (12,[TS 21,TS 22,NS 15,TS 1]))
            , ((67,12),Reduce (12,[TS 21,TS 22,NS 15,TS 1]))
            , ((67,13),Reduce (12,[TS 21,TS 22,NS 15,TS 1]))
            , ((67,22),Reduce (12,[TS 21,TS 22,NS 15,TS 1]))
            , ((67,26),Reduce (12,[TS 21,TS 22,NS 15,TS 1]))
            , ((67,16),Reduce (12,[TS 21,TS 22,NS 15,TS 1]))
            , ((67,21),Reduce (12,[TS 21,TS 22,NS 15,TS 1]))
            , ((68,4),Shift 75)
            , ((69,3),Shift 48)
            , ((69,21),Shift 49)
            , ((70,6),Reduce (10,[NS 8,TS 9,NS 10]))
            , ((71,4),Shift 77)
            , ((72,2),Reduce (16,[NS 16,NS 17]))
            , ((72,1),Reduce (16,[NS 16,NS 17]))
            , ((72,23),Reduce (16,[NS 16,NS 17]))
            , ((72,3),Reduce (16,[NS 16,NS 17]))
            , ((72,4),Reduce (16,[NS 16,NS 17]))
            , ((72,22),Reduce (16,[NS 16,NS 17]))
            , ((73,23),Shift 53)
            , ((73,3),Shift 54)
            , ((73,22),Shift 55)
            , ((74,1),Reduce (13,[NS 14,TS 2,NS 13]))
            , ((74,4),Reduce (13,[NS 14,TS 2,NS 13]))
            , ((75,2),Reduce (14,[TS 3,NS 13,TS 4]))
            , ((75,1),Reduce (14,[TS 3,NS 13,TS 4]))
            , ((75,4),Reduce (14,[TS 3,NS 13,TS 4]))
            , ((76,1),Reduce (15,[NS 16,TS 2,NS 15]))
            , ((76,4),Reduce (15,[NS 16,TS 2,NS 15]))
            , ((77,2),Reduce (17,[TS 3,NS 15,TS 4]))
            , ((77,1),Reduce (17,[TS 3,NS 15,TS 4]))
            , ((77,23),Reduce (17,[TS 3,NS 15,TS 4]))
            , ((77,3),Reduce (17,[TS 3,NS 15,TS 4]))
            , ((77,4),Reduce (17,[TS 3,NS 15,TS 4]))
            , ((77,22),Reduce (17,[TS 3,NS 15,TS 4]))
            ]
        , getReduceTable = YMap.fromList 
            [ ((0,12),1)
            , ((0,2),2)
            , ((0,3),3)
            , ((0,4),4)
            , ((0,5),5)
            , ((0,6),6)
            , ((0,7),7)
            , ((0,8),8)
            , ((0,9),9)
            , ((0,11),10)
            , ((0,1),11)
            , ((1,12),1)
            , ((1,3),3)
            , ((1,4),4)
            , ((1,5),5)
            , ((1,6),6)
            , ((1,7),7)
            , ((1,8),8)
            , ((1,9),9)
            , ((1,11),27)
            , ((8,9),42)
            , ((17,10),31)
            , ((17,8),32)
            , ((17,9),9)
            , ((18,3),36)
            , ((18,4),4)
            , ((18,5),5)
            , ((18,6),6)
            , ((18,7),7)
            , ((18,8),8)
            , ((18,9),9)
            , ((20,8),44)
            , ((20,9),9)
            , ((21,3),35)
            , ((21,4),4)
            , ((21,5),5)
            , ((21,6),6)
            , ((21,7),7)
            , ((21,8),8)
            , ((21,9),9)
            , ((22,8),45)
            , ((22,9),9)
            , ((29,13),46)
            , ((29,14),47)
            , ((30,15),50)
            , ((30,16),51)
            , ((30,17),52)
            , ((32,9),42)
            , ((37,3),58)
            , ((37,4),4)
            , ((37,5),5)
            , ((37,6),6)
            , ((37,7),7)
            , ((37,8),8)
            , ((37,9),9)
            , ((38,5),60)
            , ((38,6),6)
            , ((38,7),7)
            , ((38,8),8)
            , ((38,9),9)
            , ((39,3),59)
            , ((39,4),4)
            , ((39,5),5)
            , ((39,6),6)
            , ((39,7),7)
            , ((39,8),8)
            , ((39,9),9)
            , ((40,7),62)
            , ((40,8),8)
            , ((40,9),9)
            , ((41,5),61)
            , ((41,6),6)
            , ((41,7),7)
            , ((41,8),8)
            , ((41,9),9)
            , ((43,7),63)
            , ((43,8),8)
            , ((43,9),9)
            , ((44,9),42)
            , ((45,9),42)
            , ((48,13),68)
            , ((48,14),47)
            , ((51,17),72)
            , ((54,15),71)
            , ((54,16),51)
            , ((54,17),52)
            , ((56,10),70)
            , ((56,8),32)
            , ((56,9),9)
            , ((69,13),74)
            , ((69,14),47)
            , ((73,15),76)
            , ((73,16),51)
            , ((73,17),52)
            ]
        }

